#  BOT TU TI√äN ‚Äî NTH3.volume (Module, no-self) (BT-1727-KIM)
#  Phi√™n b·∫£n: v18_10_statslog (2025-10-30)
#
#  Thay ƒë·ªïi so v·ªõi v18_9_storage:
#   - Ghi log ho·∫°t ƒë·ªông ng∆∞·ªùi ch∆°i (name, guild_id, last_active)
#   - Th√™m ch·ªâ s·ªë stats: ol_count, odt_count, t·ªïng NP ti√™u / nh·∫≠n t·ª´ odt
#   - Th√™m t·ªïng h·ª£p th·ªëng k√™ to√†n h·ªá th·ªëng cho l·ªánh `othongtinmc`
#   - Hi·ªÉn th·ªã Top gi√†u, Top ol, Top odt, t·ªïng ol/odt to√†n server


# =========================
# üîß H·ªÜ THAM CHI·∫æU CHUNG ‚Äî B·∫ÆT ƒê·∫¶U
# (Core: import, d·ªØ li·ªáu, backup v16, c·∫•u h√¨nh k√™nh, emoji, ·∫£nh, rarity, m√¥ t·∫£, helpers)
# =========================
import os, io, json, time, random, asyncio, logging, hashlib, tempfile
from glob import glob
from datetime import datetime
import discord
from discord.ext import commands
import aiohttp

logging.getLogger("discord").setLevel(logging.WARNING)

INTENTS = discord.Intents.default()
INTENTS.message_content = True
INTENTS.members = True

# ----------- QUAN TR·ªåNG CHO RAILWAY VOLUME -------------
# BASE_DATA_DIR: th∆∞ m·ª•c d·ªØ li·ªáu vƒ©nh vi·ªÖn
# - N·∫øu ch·∫°y local: ./data (t·ª± t·∫°o)
# - N·∫øu ch·∫°y Railway: b·∫°n set env DATA_DIR=/data v√† mount volume v√†o /data
BASE_DATA_DIR = os.environ.get(
    "DATA_DIR",
    os.path.join(os.path.dirname(os.path.abspath(__file__)), "data")
)
os.makedirs(BASE_DATA_DIR, exist_ok=True)

# data.json v√† th∆∞ m·ª•c backups s·∫Ω n·∫±m trong BASE_DATA_DIR
DATA_FILE = os.path.join(BASE_DATA_DIR, "data.json")

COOLDOWN_OL = 10
STARTING_NP = 1000

# ‚Äî‚Äî‚Äî Whitelist t·ª´ ‚Äòo‚Ä¶‚Äô kh√¥ng b√°o l·ªói CommandNotFound ‚Äî‚Äî‚Äî
IGNORE_O_TOKENS = {"ok","oh","ob","oke","okay","ooo","oi"}

# ===== H·ªÜ TH·ªêNG BACKUP v16 =====
BACKUP_DIRS = {
    "startup":        os.path.join(BASE_DATA_DIR, "backups", "startup"),
    "pre_save":       os.path.join(BASE_DATA_DIR, "backups", "pre-save"),
    "manual":         os.path.join(BASE_DATA_DIR, "backups", "manual"),
    "before_restore": os.path.join(BASE_DATA_DIR, "backups", "before-restore"),
    "resetuser":      os.path.join(BASE_DATA_DIR, "backups", "resetuser"),
    "export":         os.path.join(BASE_DATA_DIR, "backups", "export")
}

def _ensure_backup_dirs():
    for p in BACKUP_DIRS.values():
        os.makedirs(p, exist_ok=True)

def _stamp_now():
    return datetime.now().strftime("%Y%m%d-%H%M%S")

def _sha256_file(path):
    h = hashlib.sha256()
    with open(path, "rb") as f:
        for chunk in iter(lambda: f.read(8192), b""):
            h.update(chunk)
    return h.hexdigest()

def snapshot_data_v16(data, tag, subkey):
    _ensure_backup_dirs()
    stamp = _stamp_now()
    fname = f"data.json.v16.{tag}.{stamp}.json"
    dstdir = BACKUP_DIRS.get(subkey, BACKUP_DIRS["manual"])
    os.makedirs(dstdir, exist_ok=True)
    out = os.path.join(dstdir, fname)
    # ghi file backup
    with open(out, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    # k√®m checksum
    with open(out + ".sha256", "w", encoding="utf-8") as g:
        g.write(_sha256_file(out))
    return out

def list_recent_backups_v16(limit=10):
    _ensure_backup_dirs()
    files = []
    for key, d in BACKUP_DIRS.items():
        for p in glob(os.path.join(d, "data.json.v*.json")):
            files.append((os.path.getmtime(p), key, p))
    files.sort(reverse=True)
    return files[:max(1, min(20, limit))]

def total_backup_stats_v16():
    _ensure_backup_dirs()
    total_files = 0
    total_bytes = 0
    latest = None
    for key, d in BACKUP_DIRS.items():
        for p in glob(os.path.join(d, "data.json.v*.json")):
            total_files += 1
            total_bytes += os.path.getsize(p)
            mt = os.path.getmtime(p)
            if (latest is None) or (mt > latest[0]):
                latest = (mt, p)
    return {
        "files": total_files,
        "bytes": total_bytes,
        "latest": latest[1] if latest else None
    }




# ===== SAO L∆ØU T·ª∞ ƒê·ªòNG =====
# ===== SAO L∆ØU T·ª∞ ƒê·ªòNG =====
# ===== SAO L∆ØU T·ª∞ ƒê·ªòNG =====
# ===== SAO L∆ØU T·ª∞ ƒê·ªòNG =====



# Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng backup th·ªß c√¥ng (manual) c·∫ßn gi·ªØ l·∫°i
MAX_MANUAL_BACKUPS = 10

def _cleanup_old_backups_limit():
    """
    Gi·ªØ l·∫°i t·ªëi ƒëa MAX_MANUAL_BACKUPS b·∫£n backup lo·∫°i 'manual',
    x√≥a c√°c b·∫£n manual c≈© h∆°n ƒë·ªÉ tr√°nh ƒë·∫ßy volume.

    Ch·ªâ d·ªçn th∆∞ m·ª•c BACKUP_DIRS['manual'].
    Kh√¥ng ƒë·ª•ng pre-save / before-restore / startup / resetuser / export.
    """
    manual_dir = BACKUP_DIRS.get("manual")
    if not manual_dir:
        return

    try:
        # L·∫•y t·∫•t c·∫£ file .json trong th∆∞ m·ª•c manual
        pattern = os.path.join(manual_dir, "data.json.v*.json")
        files = glob(pattern)

        # N·∫øu s·ªë file <= gi·ªõi h·∫°n th√¨ th√¥i
        if len(files) <= MAX_MANUAL_BACKUPS:
            return

        # Sort gi·∫£m d·∫ßn theo t√™n file ƒë·ªÉ file m·ªõi nh·∫•t ƒë·ª©ng ƒë·∫ßu
        # (t√™n file c√≥ timestamp YYYYMMDD-HHMMSS n√™n sort t√™n ~ sort th·ªùi gian)
        files_sorted_new_first = sorted(files, reverse=True)

        # Gi·ªØ l·∫°i N b·∫£n m·ªõi nh·∫•t
        keep = set(files_sorted_new_first[:MAX_MANUAL_BACKUPS])

        # Nh·ªØng file c√≤n l·∫°i (c≈© h∆°n) s·∫Ω b·ªã x√≥a
        to_delete = [f for f in files_sorted_new_first if f not in keep]

        deleted = 0
        for f in to_delete:
            try:
                os.remove(f)
                # X√≥a lu√¥n file checksum n·∫øu c√≥
                sha_path = f + ".sha256"
                if os.path.exists(sha_path):
                    os.remove(sha_path)
                deleted += 1
            except Exception:
                pass

        print(f"[AUTO-BACKUP-CLEANUP] ƒê√£ x√≥a {deleted} b·∫£n manual c≈©, gi·ªØ l·∫°i {MAX_MANUAL_BACKUPS} b·∫£n m·ªõi nh·∫•t.")

    except Exception as e:
        print(f"[AUTO-BACKUP-CLEANUP] L·ªói d·ªçn backup manual: {e}")

# ===== SAO L∆ØU T·ª∞ ƒê·ªòNG =====
# ===== SAO L∆ØU T·ª∞ ƒê·ªòNG =====
# ===== SAO L∆ØU T·ª∞ ƒê·ªòNG =====
# ===== SAO L∆ØU T·ª∞ ƒê·ªòNG =====




# ===== D·ªÆ LI·ªÜU & TI·ªÜN √çCH CHUNG =====
SESSION: aiohttp.ClientSession | None = None
IMG_CACHE: dict[str, bytes] = {}

async def get_session() -> aiohttp.ClientSession:
    global SESSION
    if SESSION is None or SESSION.closed:
        connector = aiohttp.TCPConnector(limit=8)
        SESSION = aiohttp.ClientSession(connector=connector)
    return SESSION

async def file_from_url_cached(url: str, filename: str) -> discord.File:
    if url not in IMG_CACHE:
        sess = await get_session()
        async with sess.get(url, timeout=aiohttp.ClientTimeout(total=10)) as resp:
            resp.raise_for_status()
            IMG_CACHE[url] = await resp.read()
    return discord.File(io.BytesIO(IMG_CACHE[url]), filename=filename)

def ensure_data():
    """
    ƒê·∫£m b·∫£o c√≥ file data.json ban ƒë·∫ßu.
    """
    if not os.path.exists(DATA_FILE):
        base = {
            "bot_channel": None,
            "active": False,
            "users": {}
        }
        os.makedirs(os.path.dirname(DATA_FILE), exist_ok=True)
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(base, f, ensure_ascii=False, indent=2)

def load_data():
    """
    ƒê·ªçc data.json an to√†n, t·ª± th√™m c√°c field m·∫∑c ƒë·ªãnh n·∫øu thi·∫øu.
    """
    ensure_data()
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except json.JSONDecodeError:
        data = {"users": {}, "bot_channel": None, "active": False}
    data.setdefault("users", {})
    data.setdefault("bot_channel", None)
    data.setdefault("active", False)
    data.setdefault("guild_settings", {})
    data.setdefault("server_cfg", {})
    data.setdefault("config", {"images_enabled": True})
    return data

def save_data(data):
    """
    Ghi data.json an to√†n:
    - Backup pre-save
    - Ghi ra file t·∫°m trong c√πng th∆∞ m·ª•c
    - os.replace ƒë·ªÉ ƒë·∫£m b·∫£o atomic
    """
    try:
        snapshot_data_v16(data, tag="pre-save", subkey="pre_save")
    except Exception:
        pass

    dir_ = os.path.dirname(os.path.abspath(DATA_FILE)) or "."
    fd, tmp_path = tempfile.mkstemp(prefix="data_", suffix=".json", dir=dir_)
    os.close(fd)
    with open(tmp_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    os.replace(tmp_path, DATA_FILE)

#=================GHI L·∫†I DATA =================

def ensure_user(user_id: str):
    """
    ƒê·∫£m b·∫£o user t·ªìn t·∫°i trong data["users"].
    KH√îNG ph·ª• thu·ªôc ctx ·ªü ƒë√¢y (ƒë·ªÉ kh√¥ng ph·∫£i s·ª≠a to√†n file),
    vi·ªác ghi name / guild_id / last_active s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t ri√™ng
    b√™n trong t·ª´ng l·ªánh gameplay khi c√≥ ctx.

    Tr·∫£ v·ªÅ: data (to√†n b·ªô), v√† lu√¥n ƒë·∫£m b·∫£o khung stats m·ªõi.
    """
    data = load_data()
    users = data.setdefault("users", {})

    if user_id not in users:
        users[user_id] = {
            "ngan_phi": STARTING_NP,
            "rungs": {"D":0,"C":0,"B":0,"A":0,"S":0},
            "items": [],
            "equipped": {
                "slot_vukhi": None,
                "slot_aogiap": None
            },
            "cooldowns": {"ol":0},
            "stats": {
                "opened": 0,
                "ol_count": 0,
                "odt_count": 0,
                "ngan_phi_earned_total": 0,
                "odt_np_spent_total": 0,
                "odt_np_earned_total": 0,
                "sold_count": 0,
                "sold_value_total": 0
            },
            "claimed_missions": [],
            "achievements": [],
            "minigames": {
                "odt": {"win_streak": 0, "loss_streak": 0}
            },
            # th√¥ng tin ph·ª•c v·ª• th·ªëng k√™ to√†n h·ªá th·ªëng
            "name": "",
            "guild_id": 0,
            "last_active": 0
        }
        save_data(data)
    else:
        # ƒë·∫£m b·∫£o c√°c key m·ªõi t·ªìn t·∫°i k·ªÉ c·∫£ user c≈©
        u = users[user_id]
        u.setdefault("rungs", {"D":0,"C":0,"B":0,"A":0,"S":0})
        u.setdefault("items", [])
        u.setdefault("equipped", {})
        u["equipped"].setdefault("slot_vukhi", None)
        u["equipped"].setdefault("slot_aogiap", None)
        u.setdefault("cooldowns", {}).setdefault("ol", 0)
        st = u.setdefault("stats", {})
        st.setdefault("opened", 0)
        st.setdefault("ol_count", 0)
        st.setdefault("odt_count", 0)
        st.setdefault("ngan_phi_earned_total", 0)
        st.setdefault("odt_np_spent_total", 0)
        st.setdefault("odt_np_earned_total", 0)
        st.setdefault("sold_count", 0)
        st.setdefault("sold_value_total", 0)
        u.setdefault("claimed_missions", [])
        u.setdefault("achievements", [])
        mg = u.setdefault("minigames", {})
        mg.setdefault("odt", {"win_streak": 0, "loss_streak": 0})
        u.setdefault("name", "")
        u.setdefault("guild_id", 0)
        u.setdefault("last_active", 0)
        save_data(data)

    return data


def touch_user_activity(ctx, user_dict: dict):
    """
    C·∫≠p nh·∫≠t th√¥ng tin ho·∫°t ƒë·ªông m·ªõi nh·∫•t cho user:
    - name: t√™n hi·ªÉn th·ªã hi·ªán t·∫°i
    - guild_id: server hi·ªán t·∫°i (n·∫øu c√≥)
    - last_active: timestamp
    """
    try:
        user_dict["name"] = ctx.author.display_name
    except Exception:
        pass
    try:
        if ctx.guild:
            user_dict["guild_id"] = ctx.guild.id
    except Exception:
        pass
    try:
        user_dict["last_active"] = int(time.time())
    except Exception:
        pass





#=================GHI L·∫†I DATA =================


def format_num(n:int)->str:
    return f"{n:,}"

def make_embed(title, description="", fields=None, color=0x9B5CF6, thumb=None, image=None, footer=None):
    emb = discord.Embed(title=title, description=description, color=color)
    if fields:
        for n,v,inline in fields:
            emb.add_field(name=n, value=v, inline=inline)
    if thumb: emb.set_thumbnail(url=thumb)
    if image: emb.set_image(url=image)
    if footer: emb.set_footer(text=footer)
    return emb

# ===== C·∫§U H√åNH K√äNH (osetbot ‚Äì nhi·ªÅu k√™nh) =====
def _sv_cfg(data, guild_id: int) -> dict:
    root = data.setdefault("server_cfg", {})
    return root.setdefault(str(guild_id), {})

def get_guild_channels(data, guild_id: int) -> set[int]:
    cfg = _sv_cfg(data, guild_id)
    lst = cfg.get("bot_channels")
    if isinstance(lst, list) and lst:
        try:
            return {int(x) for x in lst}
        except Exception:
            pass
    # t∆∞∆°ng th√≠ch c≈©
    rec = data.setdefault("guild_settings", {}).setdefault(str(guild_id), {})
    legacy = rec.get("channel_id")
    if legacy:
        try:
            return {int(legacy)}
        except Exception:
            return set()
    return set()

def set_guild_channels_only(data, guild_id: int, channel_id: int):
    cfg = _sv_cfg(data, guild_id)
    cfg["bot_channels"] = [int(channel_id)]

def add_guild_channel(data, guild_id: int, channel_id: int, max_channels: int = 5) -> bool:
    cfg = _sv_cfg(data, guild_id)
    cur = list(get_guild_channels(data, guild_id))
    if int(channel_id) in cur:
        return True
    if len(cur) >= max_channels:
        return False
    cur.append(int(channel_id))
    cfg["bot_channels"] = cur
    return True

def remove_guild_channel(data, guild_id: int, channel_id: int) -> bool:
    cfg = _sv_cfg(data, guild_id)
    cur = list(get_guild_channels(data, guild_id))
    if int(channel_id) not in cur:
        return False
    cur = [c for c in cur if int(c) != int(channel_id)]
    cfg["bot_channels"] = cur
    return True

# ===== C·∫§U H√åNH K√äNH (osetbot ‚Äì nhi·ªÅu k√™nh) =====


# ===== Emoji ‚Äî B·∫ÆT ƒê·∫¶U =====
# (Khu v·ª±c Emoji d√πng chung to√†n d·ª± √°n)
RARITY_EMOJI = {
    "D": "<a:D12:1432473477616505023>",
    "C": "<a:C11:1432467636943454315>",
    "B": "<a:B11:1432467633932075139>",
    "A": "<a:A11:1432467623051919390>",
    "S": "<a:S11:1432467644761509948>",
}
RARITY_CHEST_EMOJI = {
    "D": "<a:rd_d:1431717925034918052>",
    "C": "<a:rc_d:1431713192123568328>",
    "B": "<a:rb_d:1431713180975108291>",
    "A": "<a:ra_d:1431713170384490726>",
    "S": "<a:rs_d:1432101376699269364>",
}
RARITY_CHEST_OPENED_EMOJI = {
    "D": "<a:rd_m:1431717929782870116>",
    "C": "<a:rc_m:1431713195860693164>",
    "B": "<a:rb_m:1431713187924934686>",
    "A": "<a:ra_m:1431713174704492604>",
    "S": "<a:rs_m:1431717941065547866>",
}
EMOJI_MORUONG          = "<a:rd_m:1431717929782870116>"
EMOJI_TRANG_BI_COUNT   = "<:motrangbi:1431822388793704508>"
NP_EMOJI               = "<a:np:1431713164277448888>"
EMOJI_NOHU4            = "<a:nohu5:1432589822740004934>"
EMOJI_CANHBAO          = "<:thongbao:1432852057353621586>"
EMOJI_THONGBAO         = "<:canhbao:1432848238104543322>"
EMOJI_DOTHACH          = "<a:dothach:1431793311978491914>"
EMOJI_DOTHACHT         = "<:dothacht:1431806329529303041>"
EMOJI_DOTHACH1         = "<a:dothach1:1432592899694002286>"
EMOJI_DOTHACHTHUA      = "<:dothachthua:1432755827621757038>"
# ===== Emoji ‚Äî K·∫æT TH√öC =====

# ===== Link H√¨nh ·∫¢nh ‚Äî B·∫ÆT ƒê·∫¶U =====
IMG_BANDO_DEFAULT = "https://i.postimg.cc/15CvNdQL/bando.png"
IMG_RUONG_MO      = "https://i.ibb.co/21NS0t10/ruongdamo.png"
IMG_NGAN_PHIEU    = "https://i.ibb.co/DDrgRRF1/nganphieu.png"
IMG_KHO_DO        = "https://i.postimg.cc/W3189R0f/thungdo-min.png"
IMG_NHAN_VAT      = "https://sv2.anhsieuviet.com/2025/10/29/nhanvat-min.png"
ITEM_IMAGE = {
    "Ki·∫øm":     "https://i.ibb.co/6pDBWyR/kiem.png",
    "Th∆∞∆°ng":   "https://i.ibb.co/S2C7fwJ/thuong.png",
    "ƒê√†n":      "https://i.ibb.co/Fk0rSpQg/dan.png",
    "Tr∆∞·ª£ng":   "https://i.ibb.co/ymbxhtg5/truong.png",
    "D·∫£i L·ª•a":  "https://i.ibb.co/Myx1fD34/dailua.png",
    "GƒÉng Tay": "https://i.ibb.co/gbn2Q6Gx/gangtay.png",
    "√Åo Gi√°p":  "https://i.ibb.co/jkWkT5hj/giap.png"
}
RARITY_COLOR = {
    "D":0x8B6B46,
    "C":0x2F80ED,
    "B":0x8A2BE2,
    "A":0xFF6A00,
    "S":0xFFD700
}
MAP_IMAGES = {
    "S": "https://sv2.anhsieuviet.com/2025/10/28/5-min.png",
    "A": "https://sv2.anhsieuviet.com/2025/10/28/4-min.png",
    "B": "https://sv2.anhsieuviet.com/2025/10/28/3-min.png",
    "C": "https://sv2.anhsieuviet.com/2025/10/28/2-min.png",
    "D": "https://sv2.anhsieuviet.com/2025/10/28/1-min.png",
}
# ===== Link H√¨nh ·∫¢nh ‚Äî K·∫æT TH√öC =====

# ===== Rarity, map, m√¥ t·∫£ loot ‚Äî B·∫ÆT ƒê·∫¶U =====
RARITY_PROBS = [("D",0.50),("C",0.30),("B",0.15),("A",0.04),("S",0.01)]
NGANPHIEU_RANGE = {
    "D":(1,5),
    "C":(5,10),
    "B":(10,500),
    "A":(500,2000),
    "S":(2000,50000)
}
PROB_ITEM_IN_RUONG = 0.40
MAP_POOL = [
    "Bi·ªán Kinh","ƒê√†o Kh√™ Th√¥n","Tam Thanh S∆°n",
    "H√†ng Ch√¢u","T·ª´ Ch√¢u","Nh·∫°n M√¥n Quan",
    "Discord NTH Fan"
]
ITEM_TYPES = [
    "Ki·∫øm","Th∆∞∆°ng","ƒê√†n","Tr∆∞·ª£ng",
    "D·∫£i L·ª•a","GƒÉng Tay","√Åo Gi√°p"
]
ITEM_VALUE_RANGE = {
    "D":(20,100),
    "C":(100,500),
    "B":(500,5000),
    "A":(5000,20000),
    "S":(20000,200000)
}
ITEM_NAMES = {
    "Ki·∫øm":[
        ("Ki·∫øm S·∫Øt","D"),
        ("Ki·∫øm Lam Tinh","C"),
        ("Ki·∫øm H√†n V√¢n","B"),
        ("Ki·∫øm Tr√∫c Nguy·ªát","A"),
        ("Ki·∫øm Th∆∞·ª£ng Th·∫ßn","S")
    ],
    "Th∆∞∆°ng":[
        ("Th∆∞∆°ng S∆°","D"),
        ("Th∆∞∆°ng B√£o T·ªë","C"),
        ("Th∆∞∆°ng Ti√™u H·ªìn","B"),
        ("Th∆∞∆°ng Huy·ªÅn V≈©","A"),
        ("Th∆∞∆°ng Ch·∫•n Thi√™n","S")
    ],
    "ƒê√†n":[
        ("ƒê√†n Tre","D"),
        ("ƒê√†n Thanh","C"),
        ("ƒê√†n H·ªìn Thanh","B"),
        ("ƒê√†n Ph√°p Nguy·ªát","A"),
        ("ƒê√†n Thi√™n Nh·∫°c","S")
    ],
    "Tr∆∞·ª£ng":[
        ("Tr∆∞·ª£ng G·ªó","D"),
        ("Tr∆∞·ª£ng Ma","C"),
        ("Tr∆∞·ª£ng Phong ·∫¢nh","B"),
        ("Tr∆∞·ª£ng Linh Ng∆∞ng","A"),
        ("Tr∆∞·ª£ng C√†n Kh√¥n","S")
    ],
    "D·∫£i L·ª•a":[
        ("L·ª•a T·∫ßm Th√¥n","D"),
        ("L·ª•a Thanh","C"),
        ("L·ª•a Huy·ªÖn Li·ªÖu","B"),
        ("L·ª•a Ph∆∞·ª£ng Ho√†ng","A"),
        ("L·ª•a M·ªã ·∫¢nh","S")
    ],
    "GƒÉng Tay":[
        ("GƒÉng V·∫£i","D"),
        ("GƒÉng B√£o","C"),
        ("GƒÉng Ma Ph√°p","B"),
        ("GƒÉng Kim C∆∞∆°ng","A"),
        ("GƒÉng V√¥ ·∫¢nh","S")
    ],
    "√Åo Gi√°p":[
        ("√Åo Da","D"),
        ("√Åo Linh Phi","C"),
        ("√Åo Ng·ª± V√¢n","B"),
        ("√Åo H·∫Øc V√¥ C·ª±c","A"),
        ("√Åo V√¥ Song","S")
    ]
}

MAP_DISCORD = "Discord NTH Fan"

DESCRIPTIONS = {
    "D": [
        "B·∫°n d·∫°o quanh ch·ª£ ph√†m nh√¢n, b·∫•t ng·ªù ph√°t hi·ªán chi·∫øc r∆∞∆°ng g·ªó c≈© d∆∞·ªõi g·ªëc c√¢y.",
        "H√†nh t·∫©u giang h·ªì v·∫•p h√≤n ƒë√° l·∫° ‚Äî b√™n d∆∞·ªõi l√† r∆∞∆°ng ph·ªß r√™u.",
        "Tr·ªùi n·∫Øng ƒë·∫πp, b·∫°n l√™n n√∫i h√°i thu·ªëc ‚Äî ven ƒë∆∞·ªùng l·ªô ra r∆∞∆°ng g·ªó m·ªôc.",
        "Ho√†n th√†nh vi·ªác v·∫∑t ·ªü tr·∫•n nh·ªè, tr∆∞·ªüng l√£o th∆∞·ªüng cho b·∫°n r∆∞∆°ng b√© x√≠u.",
        "Gi·∫øng c·ªï l·ªô ƒë√° l·∫°, b·∫°n moi ra chi·∫øc r∆∞∆°ng s·ª©t m·∫ª.",
        "T·∫°i l√πm tr√∫c vang √¢m thanh kh·∫Ω, b·∫°n nh·∫∑t ƒë∆∞·ª£c r∆∞∆°ng mini.",
        "B√£o tan, g·ªëc c√¢y b·∫≠t r·ªÖ ‚Äî l·ªô ra r∆∞∆°ng ƒë·ªìng r·ªâ.",
        "ƒê·ªìng h√†nh c·∫£m t·∫°, t·∫∑ng b·∫°n r∆∞∆°ng nh·ªè b·ªçc v·∫£i.",
        "C·ª≠a h√†ng t·∫°p h√≥a b√°n r·∫ª m·ªôt r∆∞∆°ng c≈© kh√¥ng ch√¨a.",
        "B·∫øn thuy·ªÅn c√≥ bao t·∫£i d·∫°t v√†o, trong l√† r∆∞∆°ng g·ªó con.",
        "Khe n√∫i h·∫πp ph·∫£n quang, h√≥a ra l√† kh√≥a r∆∞∆°ng c≈©.",
        "Ti·ªÉu tƒÉng qu√™n ƒë·ªì, b·∫°n tr·∫£ l·∫°i ‚Äî ƒë∆∞·ª£c t·∫∑ng r∆∞∆°ng m·ªôc.",
        "S∆∞∆°ng s·ªõm ƒë·ªçng n·∫∑ng tr√™n n·∫Øp r∆∞∆°ng, b·∫°n kh·∫Ω m·ªü th·ª≠.",
        "L·ªÅu c·ªè b·ªè hoang, r∆∞∆°ng b√© b·ªã b·ª•i ph·ªß k√≠n.",
        "Ti·∫øng ve ng·ª´ng, m√πi g·ªó c≈© tho·∫£ng l√™n ‚Äî m·ªôt r∆∞∆°ng nh·ªè n·∫±m ƒë√≥.",
        "D∆∞·ªõi b·∫≠c ƒë√° mi·∫øu hoang, b·∫°n g·∫°t r√™u th·∫•y r∆∞∆°ng g√†i then.",
        "B·ªù ru·ªông c√≥ √°nh l·∫≠p l√≤e ‚Äî d√¢y leo che n·ª≠a chi·∫øc r∆∞∆°ng.",
        "B·∫°n ƒë·ªët l·ª≠a s∆∞·ªüi ƒë√™m, tro t√†n l·ªô ra m√©p r∆∞∆°ng v·ª°.",
        "Tr√™n t·∫•m bia s·ª•p c√≥ kh·∫Øc k√Ω hi·ªáu d·∫´n t·ªõi r∆∞∆°ng c≈©.",
        "M·ªôt con s√≥c tha nh·∫ßm ch√¨a kh√≥a, b·∫°n l·∫ßn theo v√† g·∫∑p r∆∞∆°ng m·ªôc."
    ],
    "C": [
        "B·∫°n r√∫t qu·∫ª ƒë·∫°i c√°t, may m·∫Øn nh·∫∑t ƒë∆∞·ª£c r∆∞∆°ng g·ªó ph√°t s√°ng nh·∫π.",
        "Ngh·ªâ ch√¢n b√™n su·ªëi nghe ti·∫øng ng√¢n ‚Äî r∆∞∆°ng ƒë·ªìng nho nh·ªè tr√¥i l√™n.",
        "B·∫°n v·∫•p ph·∫£i r∆∞∆°ng b√© lƒÉn t·ªõi nh∆∞ mu·ªën theo b·∫°n v·ªÅ.",
        "Gi√≥ ngh·ªãch th·ªïi r∆∞∆°ng mini ƒë·∫øn s√°t m≈©i gi√†y.",
        "Trong l√πm hoa, b∆∞·ªõm ƒë·∫≠u l√™n chi·∫øc r∆∞∆°ng nh·ªè kh·∫£m ƒëinh.",
        "Tuy·∫øt tan ƒë·ªÉ l·ªô r∆∞∆°ng ƒë∆°n s∆° n√©p trong bƒÉng m·ªèng.",
        "B·∫°n luy·ªán c√¥ng v·∫•p ƒë√° ‚Äî d∆∞·ªõi ƒë√≥ l√† r∆∞∆°ng c≈© ph·ªß b·ª•i.",
        "D·ªçn kho ch√πa hoang b·∫Øt g·∫∑p r∆∞∆°ng b√© b·ªã chu·ªôt tha v√†o g√≥c.",
        "L√†n kh√≥i ƒë√†n h∆∞∆°ng d·∫´n b·∫°n t·ªõi r∆∞∆°ng g·ªó kh·∫Øc ph√π.",
        "M∆∞a r√†o t·∫°nh, c·∫ßu v·ªìng chi·∫øu l√™n n·∫Øp r∆∞∆°ng nh·ªè.",
        "Ng∆∞ √¥ng c√∫ng b·∫°n r∆∞∆°ng l·∫° v·ªõt ngo√†i h·ªì.",
        "Ti·∫øng chu√¥ng xa ng√¢n, n·∫Øp r∆∞∆°ng kh·∫Ω rung theo nh·ªãp.",
        "ƒê√° t·∫£ng n·ª©t, khe h·ªü gi·∫•u r∆∞∆°ng mini b·ªçc l·ª•a.",
        "B·∫°n gi√∫p d√¢n l√†ng s·ª≠a ƒë√™, ƒë∆∞·ª£c t·∫∑ng r∆∞∆°ng nh·ªè tri √¢n.",
        "Tr√™n c√†nh c√¢y r·ªóng c√≥ r∆∞∆°ng g·ªó nh√©t v·ª´a tay.",
        "Chu√¥ng gi√≥ treo hi√™n tr·ªè h∆∞·ªõng ‚Äî b·∫°n th·∫•y r∆∞∆°ng nh·ªè.",
        "B∆∞·ªõc ch√¢n ch·∫°m b·∫≠c c·ªï th·ªÅm, vi√™n g·∫°ch r∆°i l·ªô r∆∞∆°ng con.",
        "ƒê·ªëm l·ª≠a ƒëom ƒë√≥m t·ª• l·∫°i quanh chi·∫øc r∆∞∆°ng tinh x·∫£o.",
        "B·∫°n nh·∫∑t l√° b√πa c·ªï, d∆∞·ªõi l√† r∆∞∆°ng g·ªó c√†i then.",
        "Ve s·∫ßu l·ªôt x√°c b√™n r∆∞∆°ng nh·ªè kh·∫Øc ƒë∆∞·ªùng v√¢n ƒë·∫πp."
    ],
    "B": [
        "B·∫°n th√°m hi·ªÉm ngo·∫°i th√†nh, ƒë√°nh lui du c√¥n ‚Äî thu ƒë∆∞·ª£c r∆∞∆°ng qu√Ω.",
        "ƒê√™m trƒÉng linh quang chi·∫øu xu·ªëng ‚Äî hi·ªán r∆∞∆°ng c·ªï ti·ªÅn tri·ªÅu.",
        "B·∫°n l·∫≠p c√¥ng b·∫Øt tr·ªôm, ƒë∆∞·ª£c th∆∞·ªüng r∆∞∆°ng kh√≥a ƒë·ªìng n·∫∑ng.",
        "Ph√° tr·∫≠n ph√°p ƒë∆°n s∆° trong hang t·ªëi ‚Äî r∆∞∆°ng b√≠ ·∫©n l·ªô ra.",
        "ƒê·∫©y l√πi c∆∞·ªõp ƒë∆∞·ªùng, r∆∞∆°ng r∆°i t·ª´ tay t√™n th·ªß lƒ©nh.",
        "S·ª≠a mi·∫øu th·ªù, sau b·ªá ƒë√° ·∫©n r∆∞∆°ng c·ªï ƒëinh ch·∫°m.",
        "Tr·∫≠n chi·∫øn v√°ch ƒë√° k·∫øt th√∫c, r∆∞∆°ng r∆°i ƒë√∫ng b√†n tay b·∫°n.",
        "Qua minh c·ªëc, chu√¥ng ƒë√° rung ‚Äî r∆∞∆°ng qu√Ω b·∫≠t n·∫Øp.",
        "H·ªì sen n·ªü r·ªô; g·ªëc sen d√≠nh r∆∞∆°ng ch·∫°m b·∫°c.",
        "Th∆∞ kh·ªë c≈© c√≥ h·ªôc b√≠ m·∫≠t, b√™n trong l√† r∆∞∆°ng kh·∫£m ƒë·ªìng.",
        "Qu·∫∑ng m·∫°ch ƒë·ªïi s·∫Øc, b·∫°n ƒë√†o l√™n r∆∞∆°ng tr√¢n ch√¢u.",
        "ƒê·ªânh n√∫i n·ªïi m√¢y t√≠m, r∆∞∆°ng m·∫° ƒë·ªìng hi·ªán d·∫•u ·∫•n gia t·ªôc.",
        "M·ªô c·ªï l·ªô ra ƒë·∫°o kh·∫©u, r∆∞∆°ng ch·∫°m th√∫ canh gi·ªØ.",
        "H·∫°c gi·∫•y ch·ªâ ƒë∆∞·ªùng ƒë∆∞a b·∫°n t·ªõi r∆∞∆°ng g·∫•m.",
        "M∆∞a sao bƒÉng r∆°i, r∆∞∆°ng s√°ng d·ªãu ƒë√°p b√™n ch√¢n.",
        "Ti·∫øng ti√™u tr√™n n√∫i g·ªçi b·∫°n t·ªõi r∆∞∆°ng kh·∫Øc long v√¢n.",
        "C·ª≠a ng·∫ßm V√¢n S∆°n m·ªü, r∆∞∆°ng qu√Ω t·ª´ t∆∞·ªùng tr∆∞·ª£t ra.",
        "C√¢y c·ªï th·ª• ti·∫øt nh·ª±a th∆°m, trong h·ªëc l√† r∆∞∆°ng b√≠ d∆∞·ª£c.",
        "L√≤ r√®n ngu·ªôi tro c√≤n ·∫•m, r∆∞∆°ng th√©p s·∫´m n·∫±m d∆∞·ªõi ƒëe.",
        "S·∫Øc ph√π c·ªï rung l√™n ‚Äî r∆∞∆°ng qu√Ω ƒë√°p ·ª©ng l·ªùi tri·ªáu."
    ],
    "A": [
        "Thi√™n v·∫≠n ch√∫ √Ω ‚Äî m·ªôt r∆∞∆°ng ng·ªçc hi·ªán ra gi·ªØa linh quang r·ª±c r·ª°.",
        "T·∫≠p khinh c√¥ng r∆°i v√†o khe ‚Äî ƒë√°y c√≥ r∆∞∆°ng b√°u l√≥e s√°ng.",
        "√Ånh linh l·ª±c t·ª• l·∫°i h√≥a r∆∞∆°ng ch√¢u s√°ng ng·ªùi.",
        "C·ªï th·ª• n·ªü hoa ƒë√™m, g·ªëc h√© r∆∞∆°ng th∆°m m√πi linh d∆∞·ª£c.",
        "Kh√≠ m·∫°ch ch·∫•n ƒë·ªông, r∆∞∆°ng ph√°t s√°ng bay v√≤ng quanh r·ªìi h·∫° xu·ªëng.",
        "Ti√™n h·∫°c s√† xu·ªëng, ƒë·∫∑t r∆∞∆°ng ch√¢u tinh x·∫£o v√†o tay b·∫°n.",
        "Kho·∫£nh kh·∫Øc ƒë·ªôt ph√° c·∫£nh gi·ªõi, ƒë·∫•t rung l·ªô r∆∞∆°ng b√°u ch·ªù s·∫µn.",
        "T√¢m b√£o tuy·∫øt t√°ch ƒë√¥i, r∆∞∆°ng v√†ng l∆° l·ª≠ng nh∆∞ ƒë·ª£i ch·ªß.",
        "D√≤ng su·ªëi h√≥a th√†nh g∆∞∆°ng, ph·∫£n chi·∫øu r∆∞∆°ng ng·ªçc l·∫•p l√°nh.",
        "V√¢n h√† m·ªü l·ªëi, r∆∞∆°ng huy·ªÅn quang t·ª´ xa bay t·ªõi.",
        "ƒê√†i t·∫ø c·ªï n·ªïi l√™n, r∆∞∆°ng kh·∫Øc ph√π vƒÉn ti√™n gia.",
        "H√†o quang t·ª• ƒë·ªânh, r∆∞∆°ng ch√≥i r√≥t xu·ªëng tay b·∫°n.",
        "Tinh t√∫ ƒë·ªïi v·ªã, r∆∞∆°ng thi√™n t∆∞·ª£ng r∆°i ƒë√∫ng t·ªça ƒë·ªô.",
        "Chu√¥ng c·ªï t·ª± ng√¢n ba h·ªìi, r∆∞∆°ng b√°u tr·ªìi kh·ªèi n·ªÅn ƒë·∫•t.",
        "Linh ƒëi·ªÉu d·∫´n ƒë∆∞·ªùng, r∆∞∆°ng b·∫£o v·∫≠t hi·ªán n∆°i l√≤ng ch·∫£o.",
        "Th·ªßy k√≠nh v·ª°, r∆∞∆°ng √°nh b·∫°c tr·ªìi l√™n nh∆∞ h√¥ ·ª©ng.",
        "S∆∞∆°ng m√π t√°n, r∆∞∆°ng b·∫°ch ng·ªçc hi·ªán gi·ªØa th·∫£o nguy√™n.",
        "ƒê√° tr·ªùi n·ª©t, r∆∞∆°ng ho√†ng kim t·ª´ l√µi ƒë√° l·ªô di·ªán.",
        "Th√°p c·ªï m·ªü m·∫Øt tr·∫≠n, r∆∞∆°ng ng·ªçc t·ª´ b·∫≠c thang tr√¥i xu·ªëng.",
        "Phong v√¢n bi·∫øn s·∫Øc, r∆∞∆°ng b√°u ƒë√°p xu·ªëng theo v·∫øt s√©t."
    ],
    "S": [
        "Thi√™n ƒë·ªãa dao ƒë·ªông ‚Äî r∆∞∆°ng th·∫ßn b√≠ ƒë√°p xu·ªëng nh∆∞ ti√™n nh√¢n g·ª≠i t·∫∑ng.",
        "Nh·∫≠p ƒë·ªãnh c·ª≠u thi√™n ‚Äî t·ªânh d·∫≠y ƒë√£ th·∫•y r∆∞∆°ng ch·ª©a b√≠ b·∫£o th·∫•t truy·ªÅn.",
        "M√¢y x√© tr·ªùi, r∆∞∆°ng th·∫ßn gi√°ng nh∆∞ s·∫Øc phong c·ª≠u thi√™n.",
        "C·ªï m·ªôc h√≥a r·ªìng r·ªìi tan ‚Äî r∆∞∆°ng kim s·∫Øc c√≤n l·∫°i nh∆∞ di v·∫≠t ti√™n gi·ªõi.",
        "T∆∞·ª£ng th·∫ßn m·ªü m·∫Øt, ƒë·∫°o √¢m vang ‚Äî r∆∞∆°ng ch√≠ t√¥n h·∫° xu·ªëng.",
        "TrƒÉng d·ª±ng T√¢y H·ªì, n∆∞·ªõc t√°ch ‚Äî r∆∞∆°ng ti√™n t·ª´ ƒë√°y h·ªì bay l√™n.",
        "C·ªïng th·ªùi kh√¥ng m·ªü, r∆∞∆°ng v√†ng t·ª´ xa x∆∞a trao quy·ªÅn th·ª´a k·∫ø.",
        "Tuy·∫øt phong t·ª• long ·∫£nh h√≥a r∆∞∆°ng, ƒë·∫•t tr·ªùi l·∫∑ng im.",
        "Thi√™n tinh r∆°i, r∆∞∆°ng nh·∫≠t nguy·ªát dung h·ª£p trong tay b·∫°n.",
        "V√¢n ki·∫øp ti√™u tan, r∆∞∆°ng thi√™n kim treo gi·ªØa kh√¥ng trung.",
        "ƒê·∫°o v·∫≠n h·ªôi t·ª• l√™n ƒë·ªânh ƒë·∫ßu ‚Äî r∆∞∆°ng th·∫ßn gi√°ng l·ªÖ t·∫•n phong.",
        "Long m·∫°ch chuy·ªÉn, r∆∞∆°ng ch√≠ t√¥n n·ª©t √°nh th·∫ßn vƒÉn.",
        "Chu thi√™n ƒë·∫°i tr·∫≠n k√≠ch ho·∫°t, r∆∞∆°ng ho√†ng c·ª±c xu·∫•t th·∫ø.",
        "Nguy·ªát quang ch·∫£y th√†nh su·ªëi, r∆∞∆°ng tinh di·ªáu n·ªïi b·ªìng b·ªÅnh.",
        "L√¥i ƒë√¨nh gi√°ng xu·ªëng, r∆∞∆°ng l·ª•c l√¥i an t·ªça b·∫•t ƒë·ªông.",
        "Ti√™n c·∫ßm h√°t kh√∫c ƒëƒÉng thi√™n, r∆∞∆°ng b·∫£o v√¢n thƒÉng h·∫°.",
        "V√¥ t·ª± thi√™n th∆∞ t·ª± l·∫≠t, r∆∞∆°ng kim quang xu·∫•t hi·ªán ·ªü ch∆∞∆°ng cu·ªëi.",
        "H·ªìn ƒë√®n mi·∫øu c·ªï b√πng ch√°y, r∆∞∆°ng x√≠ch kim bay kh·ªèi b·ªá.",
        "Thanh thi√™n m·ªü v·∫øt r·∫°n, r∆∞∆°ng thi√™n uy xuy√™n qua khe n·ª©t.",
        "Thi√™n ƒë·∫°o ban ·∫•n, r∆∞∆°ng th√°nh kh·∫Øc l·ªánh ƒë·ªì tr√™n n·∫Øp."
    ],
}

DISCORD_DESCRIPTIONS = {
    "D": [
        "B·∫°n tham gia event nh·∫π tr√™n Discord ‚Äî qu√† an ·ªßi l√† chi·∫øc r∆∞∆°ng g·ªó m·ªôc.",
        "Tin nh·∫Øn h·ªá th·ªëng ping: ‚ÄòB·∫°n c√≥ ph·∫ßn qu√† nh·ªè!‚Äô ‚Äî m·ªü ra r∆∞∆°ng c≈©.",
        "Channel #eventbang n·ªï th√¥ng b√°o ‚Äî b·∫°n k·ªãp claim r∆∞∆°ng nh·ªè.",
        "B·∫°n tr·∫£ l·ªùi ƒë√∫ng 1 c√¢u quiz ‚Äî ƒë∆∞·ª£c ph√°t r∆∞∆°ng b√© x√≠u.",
        "Admin ph√°t l√¨ x√¨ test ‚Äî b·∫°n nh·∫≠n m·ªôt r∆∞∆°ng ƒë∆°n s∆°.",
        "Bot g·ª≠i DM ‚Äònhi·ªám v·ª• h·∫±ng ng√†y‚Äô ‚Äî b·∫°n nh·∫≠n r∆∞∆°ng m·ªôc.",
        "B·∫°n gh√© k√™nh #chatbanghoi ‚Äî mod t·∫∑ng r∆∞∆°ng g·ªó.",
        "Ph·∫£n h·ªìi bug h·ª£p l·ªá ‚Äî ph·∫ßn qu√† l√† r∆∞∆°ng ph·ªß b·ª•i.",
        "B·∫°n online ƒë·ªß gi·ªù ‚Äî h·ªá th·ªëng t·∫∑ng r∆∞∆°ng b√©.",
        "Mini reaction game trao tay b·∫°n chi·∫øc r∆∞∆°ng nh·ªè.",
        "B·∫°n check-in k√™nh #chatchung ‚Äî rinh r∆∞∆°ng g·ªó mini.",
        "Nhi·ªám v·ª• ‚Äòch√†o h·ªèi‚Äô ho√†n th√†nh ‚Äî nh·∫≠n r∆∞∆°ng m·ªôc.",
        "K√™nh voice k·∫øt th√∫c ‚Äî b·∫°n ƒë∆∞·ª£c r∆∞∆°ng k·ª∑ ni·ªám.",
        "B·∫°n nh·∫≠n 1 l∆∞·ª£t ƒëua v·ªãt v√† tr√∫ng qu√† ‚Äî l√† r∆∞∆°ng nh·ªè xinh.",
        "ƒêua TOP 10 k·∫øt th√∫c ‚Äî b·∫°n l·ªçt top 10 v√† c√≥ r∆∞∆°ng.",
        "Sticker war vui v·∫ª ‚Äî mod t·∫∑ng r∆∞∆°ng an ·ªßi.",
        "B·∫°n report spam k·ªãp l√∫c ‚Äî nh·∫≠n r∆∞∆°ng c·∫£m ∆°n.",
        "Tham gia poll ‚Äî ph·∫ßn th∆∞·ªüng r∆∞∆°ng g·ªó b√©.",
        "B·∫°n test role m·ªõi ‚Äî bonus r∆∞∆°ng c≈©.",
        "B·∫°n ƒë√£ ‚Äòƒë·ªçc n·ªôi quy‚Äô xong ‚Äî h·ªá th·ªëng ph√°t r∆∞∆°ng m·ªôc."
    ],
    "C": [
        "Tham gia mini game gi·ªù v√†ng ‚Äî b·∫°n nh·∫≠n r∆∞∆°ng ph√°t s√°ng nh·∫π.",
        "Bot quay s·ªë ‚Äî t√™n b·∫°n hi·ªán l√™n, r∆∞∆°ng ƒë·ªìng nho nh·ªè v·ªÅ tay.",
        "B·∫°n ƒë·∫°t m·ªëc online tu·∫ßn ‚Äî h·ªá th·ªëng g·ª≠i r∆∞∆°ng mini.",
        "S·ª± ki·ªán sticker ƒë·∫°t m·ªëc ‚Äî b·∫°n c√≥ r∆∞∆°ng c·∫£m ∆°n.",
        "G√≥p √Ω giao di·ªán h·ª£p l√Ω ‚Äî mod t·∫∑ng r∆∞∆°ng nh·ªè.",
        "Ph·∫£n h·ªìi survey ‚Äî nh·∫≠n r∆∞∆°ng ƒë·ªìng.",
        "B·∫°n ho√†n th√†nh nhi·ªám v·ª• guild ‚Äî r∆∞∆°ng C g·ª≠i th·∫≥ng kho.",
        "K√™nh event th√¥ng b√°o: b·∫°n qualified ‚Äî r∆∞∆°ng nh·ªè unlock.",
        "B·∫°n gi·ªØ s·∫°ch k√™nh chat ‚Äî h·ªá th·ªëng th∆∞·ªüng r∆∞∆°ng.",
        "Ho√†n t·∫•t onboarding role ‚Äî bonus r∆∞∆°ng C v·ª´a tay.",
        "T∆∞∆°ng t√°c ƒë·∫°t streak ‚Äî r∆∞∆°ng mini ƒë∆∞·ª£c ph√°t.",
        "B·∫°n pass checkpoint quiz ‚Äî r∆∞∆°ng ƒë·ªìng v·ªÅ t√∫i.",
        "ƒê·∫°t c·∫•p ƒë·ªô chat 5 ‚Äî r∆∞∆°ng C auto claim.",
        "Tham gia thread x√¢y √Ω t∆∞·ªüng ‚Äî qu√† l√† r∆∞∆°ng nh·ªè.",
        "B·∫°n gi√∫p tr·∫£ l·ªùi t√¢n th·ªß ‚Äî bot ghi nh·∫≠n r∆∞∆°ng th∆∞·ªüng.",
        "Ch·ªët ng√†y c√¥ng c√°n b·ªô ‚Äî ph√°t r∆∞∆°ng mini tri √¢n.",
        "B·∫°n clear report ‚Äî r∆∞∆°ng ƒë·ªìng chuy·ªÉn kho·∫£n.",
        "Check in 7 ng√†y ‚Äî r∆∞∆°ng C xu·∫•t hi·ªán.",
        "Up meme ƒë√∫ng ch·ªß ƒë·ªÅ ‚Äî r∆∞∆°ng nh·ªè b·∫≠t n·∫Øp.",
        "B·∫°n review t√†i li·ªáu ‚Äî r∆∞∆°ng mini g·ª≠i nhanh."
    ],
    "B": [
        "Th·∫Øng b√°n k·∫øt event ‚Äî b·∫°n nh·∫≠n r∆∞∆°ng qu√Ω.",
        "ƒê·ª©ng top ph·∫£n h·ªìi tu·∫ßn ‚Äî r∆∞∆°ng B v·ªÅ tay.",
        "Clear bug quan tr·ªçng ‚Äî admin t·∫∑ng r∆∞∆°ng kh√≥a ƒë·ªìng.",
        "T·ªï ch·ª©c minigame th√†nh c√¥ng ‚Äî r∆∞∆°ng qu√Ω unlock.",
        "Ho√†n th√†nh guide chu·∫©n ‚Äî r∆∞∆°ng ch·∫°m b·∫°c xu·∫•t kho.",
        "ƒê·∫°t role ‚ÄòC·ªông t√°c‚Äô ‚Äî r∆∞∆°ng B chuy·ªÉn ph√°t nhanh.",
        "Lead voice room ‚Äî kho√° ƒë·ªìng b√†n giao.",
        "G·ª≠i pack emoji ch·∫•t l∆∞·ª£ng ‚Äî r∆∞∆°ng qu√Ω t·∫∑ng th∆∞·ªüng.",
        "Review rule chi ti·∫øt ‚Äî r∆∞∆°ng B ghi c√¥ng.",
        "Ch·ª•p banner ‚Äî r∆∞∆°ng qu√Ω c√≥ t√™n b·∫°n.",
        "H·ªó tr·ª£ event cross-server ‚Äî r∆∞∆°ng B v·ªÅ kho.",
        "Deploy bot test ·ªïn ‚Äî r∆∞∆°ng kh√≥a ƒë·ªìng ƒë·∫øn tay.",
        "C·ª©u k√®o ph√∫t ch√≥t ‚Äî r∆∞∆°ng qu√Ω t√¥n vinh.",
        "Thi·∫øt k·∫ø frame ƒë·ªôc ‚Äî r∆∞∆°ng B xu·∫•t hi·ªán.",
        "ƒê·∫°t KPI n·ªôi dung ‚Äî r∆∞∆°ng qu√Ω trao tay.",
        "Moderation nghi√™m t√∫c ‚Äî r∆∞∆°ng B tri √¢n.",
        "S∆∞u t·∫ßm lore server ‚Äî r∆∞∆°ng qu√Ω h·ªçc h·ªèi.",
        "Ghim t√†i li·ªáu chu·∫©n ‚Äî r∆∞∆°ng B open slot.",
        "T·ªëi ∆∞u k√™nh voice ‚Äî r∆∞∆°ng qu√Ω ch√∫c m·ª´ng.",
        "Bi√™n t·∫≠p recap ch·∫•t ‚Äî r∆∞∆°ng B l√™n ƒë∆∞·ªùng."
    ],
    "A": [
        "Th·∫Øng chung k·∫øt event ‚Äî r∆∞∆°ng ng·ªçc r·ª±c r·ª° xu·∫•t hi·ªán.",
        "L·∫≠p th√†nh t√≠ch ƒë·ªôt ph√° th√°ng ‚Äî r∆∞∆°ng b√°u A m·ªü slot.",
        "Push d·ª± √°n server th√†nh c√¥ng ‚Äî r∆∞∆°ng ch√¢u v·ªÅ tay.",
        "Thi·∫øt k·∫ø h·ªá th·ªëng role m·ªõi ‚Äî r∆∞∆°ng ng·ªçc ph√°t s√°ng.",
        "D·∫´n d·∫Øt chi·∫øn d·ªãch c·ªông ƒë·ªìng ‚Äî r∆∞∆°ng b√°u g·ª≠i t·∫∑ng.",
        "ƒê·∫°t k·ª∑ l·ª•c t∆∞∆°ng t√°c ‚Äî r∆∞∆°ng v√†ng A h·∫° c√°nh.",
        "Ph√°t hi·ªán l·ªó h·ªïng l·ªõn ‚Äî admin trao r∆∞∆°ng ng·ªçc.",
        "X√¢y onboarding x·ªãn ‚Äî r∆∞∆°ng b√°u tr√¨nh di·ªán.",
        "Rework theme ‚Äî r∆∞∆°ng A b·ª´ng s√°ng.",
        "Contributor of the Month ‚Äî r∆∞∆°ng b√°u ƒë·∫øn.",
        "ƒêi·ªÅu ph·ªëi gi·∫£i ƒë·∫•u ‚Äî r∆∞∆°ng A ghi nh·∫≠n.",
        "Thi·∫øt k·∫ø UX cho bot ‚Äî r∆∞∆°ng ng·ªçc on-chain v√†o kho.",
        "D·∫´n tour t√¢n th·ªß ‚Äî r∆∞∆°ng b√°u theo b·∫°n v·ªÅ.",
        "Vi·∫øt t√†i li·ªáu chu·∫©n h√≥a ‚Äî r∆∞∆°ng A thƒÉng ƒëi·ªÉm.",
        "Refactor bot th√†nh c√¥ng ‚Äî r∆∞∆°ng ch√¢u s√°ng r·ª°.",
        "K·∫øt n·ªëi c·ªông ƒë·ªìng ‚Äî r∆∞∆°ng b√°u c·∫≠p b·∫øn.",
        "Tri·ªÉn khai CDN ·∫£nh ‚Äî r∆∞∆°ng A th∆∞·ªüng n√≥ng.",
        "Series event d√†i h·∫°n ‚Äî r∆∞∆°ng b√°u m·ªü n·∫Øp.",
        "Lead hackathon n·ªôi b·ªô ‚Äî r∆∞∆°ng A vinh danh.",
        "·ªîn ƒë·ªãnh h·∫° t·∫ßng ƒë√™m b√£o ‚Äî r∆∞∆°ng b√°u A g·ª≠i t·ªõi."
    ],
    "S": [
        "To√†n server v·ªó tay ‚Äî b·∫°n nh·∫≠n r∆∞∆°ng th·∫ßn s·∫Øc nh∆∞ ‚Äòlegendary drop‚Äô.",
        "T√™n b·∫°n l√™n banner ‚Äî r∆∞∆°ng S ho√†ng kim xu·∫•t hi·ªán.",
        "ƒê·∫°i s·ª± ki·ªán th√†nh c√¥ng ‚Äî r∆∞∆°ng ch√≠ t√¥n gi√°ng l√¢m.",
        "B·∫°n gi·ªØ l·ª≠a c·ªông ƒë·ªìng ‚Äî r∆∞∆°ng th√°nh ban ·∫•n.",
        "ƒê∆∞a NTH Fan l√™n trending ‚Äî r∆∞∆°ng S r·ª±c s√°ng.",
        "V∆∞·ª£t KPI to√†n di·ªán ‚Äî r∆∞∆°ng ch√≠ t√¥n kh·∫Øc l·ªánh.",
        "K·∫øt n·ªëi li√™n minh server ‚Äî r∆∞∆°ng th·∫ßn ƒë·∫°o trao tay.",
        "C·ª©u server kh·ªèi crash ‚Äî r∆∞∆°ng S thi√™n quang gi√°ng.",
        "X√¢y v·∫≠n h√†nh b·ªÅn v·ªØng ‚Äî r∆∞∆°ng ch√≠ t√¥n xu·∫•t th·∫ø.",
        "M·ªü k·ª∑ nguy√™n s·ª± ki·ªán m·ªõi ‚Äî r∆∞∆°ng th√°nh r·ª±c r·ª°.",
        "D·∫´n d·∫Øt ƒë·∫°i l·ªÖ k·ª∑ ni·ªám ‚Äî r∆∞∆°ng S h·ªôi t·ª• phong v√¢n.",
        "H·ª£p nh·∫•t c·ªông ƒë·ªìng ph√¢n m·∫£nh ‚Äî r∆∞∆°ng th·∫ßn uy m·ªü kh√≥a.",
        "V·∫Ω b·∫£n ƒë·ªì t∆∞∆°ng lai server ‚Äî r∆∞∆°ng ch√≠ t√¥n ·∫•n k√Ω.",
        "ƒê·∫∑t n·ªÅn m√≥ng h·ªá th·ªëng m·ªõi ‚Äî r∆∞∆°ng S hi·ªÉn th√°nh.",
        "Chuy·ªÉn giao th·∫ø h·ªá m∆∞·ª£t m√† ‚Äî r∆∞∆°ng th√°nh v√†ng gi√°ng.",
        "Ki·∫øn t·∫°o vƒÉn h√≥a server ‚Äî r∆∞∆°ng th·∫ßn ban t·∫∑ng.",
        "Th·ªëng nh·∫•t ti√™u chu·∫©n n·ªôi b·ªô ‚Äî r∆∞∆°ng S ƒë√°p l·ªÖ.",
        "M·ªü c·ªïng s√°ng t·∫°o ng∆∞·ªùi d√πng ‚Äî r∆∞∆°ng ch√≠ t√¥n long lanh.",
        "ƒê·ªãnh h√¨nh b·∫£n s·∫Øc vƒ©nh c·ª≠u ‚Äî r∆∞∆°ng th√°nh kh·∫Øc danh.",
        "B·∫°n tr·ªü th√†nh bi·ªÉu t∆∞·ª£ng ‚Äî r∆∞∆°ng S theo b·∫°n nh∆∞ ·∫•n t√≠n."
    ],
}

def get_loot_description(map_name: str, rarity: str) -> str:
    pool = DISCORD_DESCRIPTIONS if map_name == MAP_DISCORD else DESCRIPTIONS
    arr = pool.get(rarity, DESCRIPTIONS.get("D", []))
    if not arr:
        arr = DESCRIPTIONS["D"]
    return random.choice(arr)

def choose_rarity():
    r = random.random()
    acc=0.0
    for rar,p in RARITY_PROBS:
        acc += p
        if r <= acc:
            return rar
    return "D"

def get_nganphieu(r):
    lo,hi = NGANPHIEU_RANGE[r]
    return random.randint(lo,hi)

def gen_short_id(existing_ids:set):
    tries = 0
    while True:
        tries += 1
        iid = f"{random.randint(0,999):03d}"
        if iid not in existing_ids or tries>2000:
            return iid

def generate_item(rarity, user_items:list, item_type=None):
    if not item_type:
        item_type = random.choice(ITEM_TYPES)
    candidates = [n for (n,r) in ITEM_NAMES[item_type] if r==rarity]
    name = (random.choice(candidates) if candidates else ITEM_NAMES[item_type][0][0])
    lo,hi = ITEM_VALUE_RANGE[rarity]
    value = random.randint(lo,hi)
    existing = {it["id"] for it in user_items}
    iid = gen_short_id(existing)
    return {
        "id": iid,
        "name": name,
        "type": item_type,
        "rarity": rarity,
        "value": value,
        "equipped": False
    }
# ===== Rarity, map, m√¥ t·∫£ loot ‚Äî K·∫æT TH√öC =====

# ===== ·∫¢NH: helper attach tr·ªÖ =====
IMAGE_TIMEOUT_SEC = 2.5
async def _attach_image_later(ctx, message, embed, url, filename):
    try:
        file = await asyncio.wait_for(file_from_url_cached(url, filename), timeout=IMAGE_TIMEOUT_SEC)
        if file:
            embed.set_image(url=f"attachment://{filename}")
            try:
                await message.edit(embed=embed, attachments=[file])
            except TypeError:
                await ctx.send(embed=embed, file=file)
    except Exception:
        pass

def images_enabled_global() -> bool:
    data = load_data()
    cfg = data.get("config", {})
    return bool(cfg.get("images_enabled", True))

# =========================
# üîß H·ªÜ THAM CHI·∫æU CHUNG ‚Äî K·∫æT TH√öC
# =========================


# ===================================
# üß© BOT & C·∫§U H√åNH CHUNG ‚Äî B·∫ÆT ƒê·∫¶U
# ===================================
bot = commands.Bot(
    command_prefix=commands.when_mentioned_or("o","O"),
    intents=INTENTS,
    help_command=None,
    case_insensitive=True
)

@bot.event
async def on_ready():
    """
    G·ªçi khi bot login xong v√† event loop Discord ƒë√£ ch·∫°y.
    - Log bot ready
    - Ch·ª•p snapshot 'startup' (nh∆∞ c≈©)
    - Kh·ªüi ƒë·ªông v√≤ng auto_backup_task n·∫øu ch∆∞a ch·∫°y
    """
    global _auto_backup_started

    print(f"‚úÖ Bot ready: {bot.user} (id: {bot.user.id})")

    # Snapshot kh·ªüi ƒë·ªông (gi·ªØ nguy√™n logic c≈© c·ªßa b·∫°n)
    try:
        data = load_data()
        snapshot_data_v16(data, tag="startup", subkey="startup")
    except Exception:
        pass

    # Kh·ªüi ƒë·ªông v√≤ng auto backup 1 l·∫ßn duy nh·∫•t
    if not _auto_backup_started:
        try:
            auto_backup_task.start()
            _auto_backup_started = True
            print("[AUTO-BACKUP] ƒê√£ kh·ªüi ƒë·ªông auto_backup_task.")
            print(
                f"[AUTO-BACKUP] C·∫•u h√¨nh ban ƒë·∫ßu: "
                f"backup m·ªói {AUTO_BACKUP_INTERVAL_MINUTES} ph√∫t, "
                f"b√°o m·ªói {AUTO_REPORT_INTERVAL_MINUTES} ph√∫t."
            )
        except RuntimeError:
            # N·∫øu Discord reconnect v√† task ƒë√£ start r·ªìi -> b·ªè qua
            pass
# ===================================
# üß© BOT & C·∫§U H√åNH CHUNG ‚Äî K·∫æT TH√öC
# ===================================


# =================================================
# üß± QU·∫¢N L√ù ‚Äî ADMIN (module-style)
# =================================================
from discord import ui, ButtonStyle, Interaction

ADMIN_WHITELIST = {
    "setbot","osetbot",
    "lenhquantri","saoluu","listbackup","xemsaoluu",
    "phuchoi","resetdata","resetuser",
    "addtien","addruong",
    "gianlan","thabong","phattu",
    "batanh","pingg",
    "lenh","olenh"
}
GAMEPLAY_REQUIRE = {
    "ol","l",
    "okho","kho",
    "oxem","xem",
    "omac","mac",
    "othao","thao",
    "omo","mo",
    "oban","ban",
    "onhanvat","nhanvat",
    "odt","dt",
}

@bot.command(name="lenh", aliases=["olenh"])
async def cmd_olenh(ctx: commands.Context):
    desc = (
        "**‚öîÔ∏è L·ªÜNH GAMEPLAY**\n\n"
        "**osetbot** ‚Äî K√≠ch ho·∫°t BOT trong k√™nh *(Admin)*\n"
        "**ol** ‚Äî ƒêi th√°m hi·ªÉm, t√¨m r∆∞∆°ng b√°u (CD 10s)\n"
        "**omo** ‚Äî M·ªü r∆∞∆°ng (VD: omo D / omo all)\n"
        "**odt** ‚Äî ƒê·ªï th·∫°ch (h·ªó tr·ª£ `odt all`)\n"
        "**okho** ‚Äî Xem kho ƒë·ªì\n"
        "**oban all** ‚Äî B√°n t·∫•t c·∫£ ch∆∞a m·∫∑c\n"
        "**omac** `<ID>` / `othao <ID>` / `oxem <ID>`\n"
        "**onhanvat** ‚Äî Th√¥ng tin nh√¢n v·∫≠t\n\n"
        "**‚¨ÜÔ∏è L·ªÜNH M·ªöI UPDATE**\n\n"
        "**obxh** ‚Äî Xem B·∫£ng X·∫øp H·∫°ng\n\n"
        "**‚öôÔ∏è TH√îNG TIN N√ÇNG C·∫§P**\n\n"
        "‚Ä¢ L∆∞u tr·ªØ d·ªØ li·ªáu vƒ©nh vi·ªÖn\n"
        "‚Ä¢ Sao l∆∞u d·ªØ li·ªáu t·ª± ƒë·ªông\n"
        "‚Ä¢ BOT ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh, s·∫Ω kh√¥ng b·ªã ng·∫Øt k·∫øt n·ªëi gi·ªØa ch·ª´ng\n"
        "‚Ä¢ BOT ƒëang trong giai ƒëo·∫°n ph√°t tri·ªÉn, mong c√°c b·∫°n th√¥ng c·∫£m\n"



    )
    embed = discord.Embed(
        title="üìú DANH S√ÅCH L·ªÜNH C∆† B·∫¢N",
        description=desc,
        color=0xFFD700
    )
    embed.set_footer(text="BOT GAME NGH OFFLINE | NTH3.7")
    await ctx.reply(embed=embed, mention_author=False)




# =========================================
# C·∫§U H√åNH K√äNH BOT / THEO D√ïI SERVER
# L·ªánh: osetbot / setbot
# Y√™u c·∫ßu: admin server
# =========================================

from discord.ext import commands
from discord import ui, ButtonStyle, Interaction
import time

def _update_guild_info_block(data, guild_obj: discord.Guild):
    """
    C·∫≠p nh·∫≠t th√¥ng tin server (guild) v√†o data["guilds"] ƒë·ªÉ
    l·ªánh th·ªëng k√™ (othongtinmc) c√≥ th·ªÉ ƒë·ªçc t√™n server,
    s·ªë th√†nh vi√™n, v√† danh s√°ch k√™nh bot h·ª£p l·ªá.
    """
    gid = str(guild_obj.id)

    # ƒë·∫£m b·∫£o nh√°nh t·ªìn t·∫°i
    data.setdefault("guilds", {})
    if gid not in data["guilds"]:
        data["guilds"][gid] = {}

    # t√™n server
    data["guilds"][gid]["name"] = guild_obj.name

    # s·ªë th√†nh vi√™n (n·∫øu bot c√≥ quy·ªÅn xem)
    mcount = getattr(guild_obj, "member_count", None)
    if mcount is not None:
        data["guilds"][gid]["member_count"] = int(mcount)

    # l·∫ßn cu·ªëi ch·ªânh c·∫•u h√¨nh bot cho server n√†y (epoch gi√¢y)
    data["guilds"][gid]["last_setbot"] = int(time.time())

    # l∆∞u lu√¥n danh s√°ch k√™nh bot ƒë∆∞·ª£c ph√©p hi·ªán t·∫°i ƒë·ªÉ ch·ªß bot xem th·ªëng k√™
    allowed_channels_now = list(get_guild_channels(data, guild_obj.id))
    data["guilds"][gid]["allowed_channels"] = [int(x) for x in allowed_channels_now]


class SetBotView(ui.View):
    def __init__(self, timeout: float | None = 180):
        super().__init__(timeout=timeout)

    async def _is_admin_or_deny(self, interaction: Interaction) -> bool:
        """
        Ch·ªâ cho ph√©p ng∆∞·ªùi c√≥ quy·ªÅn admin thao t√°c c√°c n√∫t.
        N·∫øu kh√¥ng ƒë·ªß quy·ªÅn -> tr·∫£ l·ªùi ephemeral v√† tho√°t.
        """
        perms = getattr(getattr(interaction.user, "guild_permissions", None), "administrator", False)
        if not perms:
            try:
                await interaction.response.send_message(
                    "‚ùå B·∫°n c·∫ßn quy·ªÅn **Qu·∫£n tr·ªã vi√™n** ƒë·ªÉ thao t√°c.",
                    ephemeral=True
                )
            except Exception:
                pass
            return False
        return True

    @ui.button(label="‚ë† Set DUY NH·∫§T k√™nh n√†y", style=ButtonStyle.success, emoji="‚úÖ")
    async def btn_set_only(self, interaction: Interaction, button: ui.Button):
        """
        Ch·ªâ cho ph√©p BOT ch·∫°y duy nh·∫•t ·ªü k√™nh n√†y.
        Xo√° whitelist c≈©, gi·ªØ ƒë√∫ng k√™nh hi·ªán t·∫°i.
        """
        if not await self._is_admin_or_deny(interaction):
            return

        data = load_data()

        # Ghi c·∫•u h√¨nh allowed_channels: CH·ªà k√™nh hi·ªán t·∫°i
        set_guild_channels_only(data, interaction.guild.id, interaction.channel.id)

        # C·∫≠p nh·∫≠t info server ƒë·ªÉ th·ªëng k√™ global
        _update_guild_info_block(data, interaction.guild)

        save_data(data)

        try:
            await interaction.response.send_message(
                f"‚úÖ ƒê√É CH·ªà ƒê·ªäNH DUY NH·∫§T k√™nh {interaction.channel.mention} cho BOT.\n"
                f"üîí C√°c l·ªánh gameplay ch·ªâ ch·∫°y ·ªü k√™nh n√†y.",
                ephemeral=True
            )
        except Exception:
            pass

    @ui.button(label="‚ë° G·ª° k√™nh n√†y", style=ButtonStyle.danger, emoji="üóëÔ∏è")
    async def btn_unset_here(self, interaction: Interaction, button: ui.Button):
        """
        G·ª° k√™nh hi·ªán t·∫°i ra kh·ªèi whitelist.
        N·∫øu whitelist r·ªóng => BOT coi nh∆∞ ch·∫°y ·ªü m·ªçi k√™nh.
        """
        if not await self._is_admin_or_deny(interaction):
            return

        data = load_data()

        removed_ok = remove_guild_channel(data, interaction.guild.id, interaction.channel.id)

        # c·∫≠p nh·∫≠t info server
        _update_guild_info_block(data, interaction.guild)

        save_data(data)

        if removed_ok:
            msg_txt = (
                f"üóëÔ∏è ƒê√É G·ª† {interaction.channel.mention} kh·ªèi danh s√°ch k√™nh BOT.\n"
                f"‚ÑπÔ∏è N·∫øu kh√¥ng c√≤n k√™nh whitelist, BOT s·∫Ω ch·∫°y ·ªü M·ªåI k√™nh."
            )
        else:
            msg_txt = (
                f"‚ÑπÔ∏è K√™nh {interaction.channel.mention} hi·ªán kh√¥ng n·∫±m trong whitelist."
            )

        try:
            await interaction.response.send_message(msg_txt, ephemeral=True)
        except Exception:
            pass

    @ui.button(label="‚ë¢ Th√™m k√™nh ph·ª• (k√™nh n√†y)", style=ButtonStyle.primary, emoji="‚ûï")
    async def btn_add_here(self, interaction: Interaction, button: ui.Button):
        """
        Th√™m k√™nh hi·ªán t·∫°i v√†o whitelist (cho ph√©p BOT ch·∫°y ·ªü nhi·ªÅu k√™nh).
        Gi·ªõi h·∫°n t·ªëi ƒëa s·ªë k√™nh ph·ª• v√≠ d·ª• 5.
        """
        if not await self._is_admin_or_deny(interaction):
            return

        data = load_data()

        added_ok = add_guild_channel(
            data,
            interaction.guild.id,
            interaction.channel.id,
            max_channels=5  # gi·ªØ gi·ªõi h·∫°n nh∆∞ thi·∫øt k·∫ø c·ªßa b·∫°n
        )

        # c·∫≠p nh·∫≠t info server
        _update_guild_info_block(data, interaction.guild)

        save_data(data)

        if added_ok:
            msg_txt = (
                f"‚ûï ƒê√É TH√äM {interaction.channel.mention} "
                f"v√†o danh s√°ch k√™nh BOT h·ª£p l·ªá cho server n√†y."
            )
        else:
            msg_txt = (
                "‚ö†Ô∏è S·ªë l∆∞·ª£ng k√™nh ƒë√£ ƒë·∫°t gi·ªõi h·∫°n. "
                "H√£y g·ª° b·ªõt tr∆∞·ªõc khi th√™m k√™nh m·ªõi."
            )

        try:
            await interaction.response.send_message(msg_txt, ephemeral=True)
        except Exception:
            pass

    @ui.button(label="‚ë£ Xem k√™nh ƒë√£ set", style=ButtonStyle.secondary, emoji="üìã")
    async def btn_list(self, interaction: Interaction, button: ui.Button):
        """
        Hi·ªÉn th·ªã danh s√°ch whitelist k√™nh BOT hi·ªán t·∫°i trong server n√†y.
        ƒê·ªìng th·ªùi c·∫≠p nh·∫≠t info server v√†o data["guilds"].
        """
        if not await self._is_admin_or_deny(interaction):
            return

        data = load_data()

        allowed_now = list(get_guild_channels(data, interaction.guild.id))

        # c·∫≠p nh·∫≠t info server (bao g·ªìm allowed_channels)
        _update_guild_info_block(data, interaction.guild)

        save_data(data)

        if not allowed_now:
            txt = (
                "üìã Ch∆∞a c√≥ k√™nh n√†o b·ªã kho√° ri√™ng.\n"
                "üëâ BOT hi·ªán c√≥ th·ªÉ ch·∫°y ·ªü M·ªåI k√™nh trong server."
            )
        else:
            mentions = []
            for cid in allowed_now:
                ch = interaction.guild.get_channel(int(cid))
                mentions.append(ch.mention if ch else f"`#{cid}`")
            txt = "üìã **Danh s√°ch k√™nh BOT ƒë∆∞·ª£c ph√©p:**\n" + " ‚Ä¢ ".join(mentions)

        try:
            await interaction.response.send_message(txt, ephemeral=True)
        except Exception:
            pass

#===============SETBOT=======================
#===============SETBOT=======================
#===============SETBOT=======================
#===============SETBOT=======================
#===============SETBOT=======================


@bot.command(name="osetbot", aliases=["setbot"])
@commands.has_guild_permissions(administrator=True)
@commands.cooldown(1, 5, commands.BucketType.user)
async def cmd_osetbot(ctx: commands.Context):
    """
    G·ª≠i menu c·∫•u h√¨nh BOT cho server hi·ªán t·∫°i (4 n√∫t).
    Admin server d√πng ƒë·ªÉ:
    - Kho√° BOT v√†o ƒë√∫ng 1 k√™nh
    - Th√™m k√™nh ph·ª•
    - G·ª° k√™nh kh·ªèi whitelist
    - Xem danh s√°ch k√™nh ƒë√£ set

    Ngo√†i ra, m·ªói l·∫ßn thao t√°c n√∫t s·∫Ω ghi th√¥ng tin server
    v√†o data["guilds"] ƒë·ªÉ ch·ªß bot coi th·ªëng k√™ t·ªïng qua l·ªánh othongtinmc.
    """

    if not ctx.guild:
        await ctx.reply(
            "L·ªánh n√†y ch·ªâ d√πng trong server, kh√¥ng d√πng trong DM.",
            mention_author=False
        )
        return

    note = (
        "‚ö†Ô∏è BOT d√πng ti·ªÅn t·ªë `o` ho·∫∑c `O`.\n"
        "Ch·ªçn c√°ch thi·∫øt l·∫≠p k√™nh BOT cho server n√†y:\n\n"
        "‚ë† Set DUY NH·∫§T k√™nh hi·ªán t·∫°i\n"
        "‚ë° G·ª° k√™nh hi·ªán t·∫°i kh·ªèi danh s√°ch\n"
        "‚ë¢ Th√™m k√™nh hi·ªán t·∫°i l√†m k√™nh ph·ª•\n"
        "‚ë£ Xem danh s√°ch k√™nh ƒë∆∞·ª£c ph√©p\n\n"
        "üìå BOT s·∫Ω ghi nh·∫≠n t√™n server + danh s√°ch k√™nh ƒë·ªÉ th·ªëng k√™."
    )

    try:
        await ctx.send(note, view=SetBotView())
    except discord.HTTPException:
        await ctx.send(
            "Kh√¥ng th·ªÉ g·ª≠i menu t∆∞∆°ng t√°c. Ki·ªÉm tra quy·ªÅn g·ª≠i message / button.",
            mention_author=False
        )


#===============SETBOT=======================
#===============SETBOT=======================
#===============SETBOT=======================
#===============SETBOT=======================
#===============SETBOT=======================





def _looks_like_noise_o(msg: str) -> bool:
    if not msg:
        return False
    s = msg.strip().lower()
    if not s:
        return False
    first = s.split()[0]
    if first in IGNORE_O_TOKENS:
        return True
    if set(first) == {"o"}:
        return True
    for t in IGNORE_O_TOKENS:
        if first.startswith("o"+t):
            return True
    return False








@bot.event
async def on_command_error(ctx: commands.Context, error):
    if isinstance(error, commands.CheckFailure):
        return
    if isinstance(error, commands.CommandNotFound):
        try:
            if _looks_like_noise_o(getattr(ctx.message, "content", "")):
                return
        except Exception:
            pass
        if ctx.guild:
            try:
                data = load_data()
                allowed = get_guild_channels(data, ctx.guild.id)
            except Exception:
                allowed = set()
            if (not allowed) or (ctx.channel.id not in allowed):
                return
        await ctx.reply(
            "‚ùì L·ªánh kh√¥ng t·ªìn t·∫°i. D√πng `olenh` ƒë·ªÉ xem danh s√°ch.",
            mention_author=False
        )
        return
    if isinstance(error, commands.CommandOnCooldown):
        await ctx.reply(
            f"‚è≥ Vui l√≤ng ch·ªù th√™m {int(error.retry_after)} gi√¢y.",
            mention_author=False
        )
        return
    if isinstance(error, commands.MissingRequiredArgument):
        name = getattr(ctx.command, "name", "")
        if name in {"mac","thao","xem"}:
            await ctx.reply(
                f"üìù L·ªánh `{name}` c·∫ßn ID. V√≠ d·ª•: `{name} 123`.",
                mention_author=False
            )
            return
        if name in {"dt"}:
            await ctx.reply(
                "üìù D√πng: `odt <s·ªë_ng√¢n_phi·∫øu>` ‚Äî v√≠ d·ª•: `odt 1000`.",
                mention_author=False
            )
            return
        await ctx.reply(
            "üìù Thi·∫øu tham s·ªë. D√πng `olenh` ƒë·ªÉ xem c√∫ ph√°p.",
            mention_author=False
        )
        return
    if isinstance(error, commands.BadArgument):
        name = getattr(ctx.command, "name", "")
        if name in {"dt"}:
            await ctx.reply(
                "‚ö†Ô∏è S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá. V√≠ d·ª•: `odt 500`.",
                mention_author=False
            )
            return
        if name in {"addtien","addruong"}:
            await ctx.reply(
                "‚ö†Ô∏è S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá. V√≠ d·ª•: `oaddtien @user 1,000`.",
                mention_author=False
            )
            return
        await ctx.reply(
            "‚ö†Ô∏è Tham s·ªë kh√¥ng h·ª£p l·ªá. Ki·ªÉm tra l·∫°i c√∫ ph√°p.",
            mention_author=False
        )
        return

@bot.check
async def global_channel_check(ctx: commands.Context):
    if not ctx.guild:  # DM
        return True
    if ctx.command is None:
        return True
    cmd_names = {
        ctx.command.name.lower(),
        *[a.lower() for a in getattr(ctx.command, "aliases", [])]
    }
    if cmd_names & ADMIN_WHITELIST:
        return True
    if cmd_names & GAMEPLAY_REQUIRE:
        data = load_data()
        allowed = get_guild_channels(data, ctx.guild.id)
        if (not allowed) or (ctx.channel.id not in allowed):
            msg = (
                "‚ö†Ô∏è BOT s·ª≠ d·ª•ng ti·ªÅn t·ªë `o` ho·∫∑c `O`.\n"
                "Y√™u c·∫ßu Admin d√πng **`osetbot`** ƒë·ªÉ ch·ªâ ƒë·ªãnh k√™nh ch·∫°y BOT cho server n√†y."
            )
            try:
                await ctx.reply(msg, mention_author=False)
            except Exception:
                await ctx.send(msg)
            return False
    return True
# =================================================


# ==================================
# üßë‚Äç‚öñÔ∏è QU·∫¢N L√ù ‚Äî CH·ª¶ BOT (module-style)
# ==================================
BOT_OWNERS = {821066331826421840}

def is_owner_user(user, bot):
    try:
        app = bot.application
        if app and app.owner and user.id == app.owner.id:
            return True
    except Exception:
        pass
    return user.id in BOT_OWNERS

def owner_only():
    async def predicate(ctx):
        return is_owner_user(ctx.author, ctx.bot)
    return commands.check(predicate)

def _get_user_ref(data: dict, member: discord.Member):
    uid = str(member.id)
    gid = str(getattr(getattr(member, "guild", None), "id", None)) if getattr(member, "guild", None) else None
    users = data.setdefault("users", {})
    if uid in users:
        return users[uid], "users"
    if gid and "guilds" in data and gid in data["guilds"]:
        g = data["guilds"][gid]
        if "users" in g and uid in g["users"]:
            return g["users"][uid], f"guilds[{gid}].users"
    if "players" in data and uid in data["players"]:
        return data["players"][uid], "players"
    u = users.setdefault(uid, {})
    return u, "users (new)"

def get_balance(u: dict) -> int:
    return int(u.get("ngan_phi", u.get("ngan_phieu", 0)))

def set_balance(u: dict, value: int) -> None:
    u["ngan_phi"] = int(value)
    if "ngan_phieu" in u:
        u.pop("ngan_phieu", None)

def ensure_rungs(u: dict) -> dict:
    legacy = u.pop("ruong", None)
    r = u.setdefault("rungs", {})
    if isinstance(legacy, dict):
        for k, v in legacy.items():
            if isinstance(v, int) and k in ("D","C","B","A","S"):
                r[k] = r.get(k, 0) + v
    for k in ("D","C","B","A","S"):
        r.setdefault(k, 0)
    return r
# =============================================================

@bot.command(name="lenhquantri")
@owner_only()
async def cmd_olenhquantri(ctx):
    lines = [
        "**L·ªÜNH CH·ª¶ BOT (Owner)**",
        "`saoluu` ‚Äî T·∫°o backup th·ªß c√¥ng",
        "`listbackup [limit]` ‚Äî Li·ªát k√™ backup g·∫ßn ƒë√¢y",
        "`xemsaoluu` ‚Äî Xem th·ªëng k√™ backup",
        "`phuchoi [filename]` ‚Äî Kh√¥i ph·ª•c d·ªØ li·ªáu",
        "`resetdata` ‚Äî Reset to√†n b·ªô d·ªØ li·ªáu (gi·ªØ config)",
        "`resetuser @user` ‚Äî Reset d·ªØ li·ªáu 1 ng∆∞·ªùi",
        "`addtien @user <s·ªë>` ‚Äî C·ªông Ng√¢n Phi·∫øu",
        "`addruong @user <ph·∫©m> <s·ªë>` ‚Äî C·∫•p r∆∞∆°ng",
        "`xtien @user` ‚Äî Ch·∫©n ƒëo√°n s·ªë d∆∞ & nh√°nh l∆∞u",
        "`batanh [on|off]` ‚Äî B·∫≠t/t·∫Øt hi·ªÉn th·ªã ·∫£nh",
        "`okhoiphucfile` ‚Äî Kh√¥i ph·ª•c d·ªØ li·ªáu t·ª´ file `data.json` (khi d·ªØ li·ªáu l·ªõn)",
        "`otestdata` ‚Äî Ki·ªÉm tra d·ªØ li·ªáu ƒëang l∆∞u trong volume Railway",
        "`othoigiansaoluu` ‚Äî Thay ƒë·ªïi th·ªùi gian sao l∆∞u t·ª± ƒë·ªông v√† th√¥ng b√°o",
        "`othongtinmc` ‚Äî Th√¥ng tin m√°y ch·ªß hi·ªán t·∫°i",


    ]
    await ctx.reply("\n".join(lines), mention_author=False)





# ====================th√¥ng tin m√°y ch·ªß===============================



@bot.command(name="othongtimc", aliases=["thongtimc"])
@owner_only()
@commands.cooldown(1, 10, commands.BucketType.user)
async def cmd_othongtinmc(ctx):
    """
    B√°o c√°o t·ªïng quan t√¨nh tr·∫°ng h·ªá th·ªëng BOT TU TI√äN.
    Ch·ªâ d√†nh cho Ch·ªß Bot.
    """

    # ===== 1. Load data =====
    try:
        data = load_data()
    except Exception as e:
        await ctx.reply(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu: {e}", mention_author=False)
        return

    users_dict = data.get("users", {})
    guilds_dict = data.get("guilds", {})

    import time
    now_ts = time.time()

    # ===== 2. Th·ªëng k√™ ng∆∞·ªùi ch∆°i =====
    total_users = len(users_dict)
    active_24h = 0
    for u in users_dict.values():
        last_active_ts = u.get("last_active", 0)
        try:
            last_active_ts = float(last_active_ts)
        except Exception:
            last_active_ts = 0
        if last_active_ts and (now_ts - last_active_ts) <= 86400:
            active_24h += 1

    # ===== 3. Kinh t·∫ø (Ng√¢n Phi·∫øu) =====
    total_money = 0
    for u in users_dict.values():
        try:
            total_money += int(u.get("ngan_phi", 0))
        except Exception:
            pass
    avg_money = (total_money / total_users) if total_users else 0

    # ===== 4. Top 5 ng∆∞·ªùi gi√†u nh·∫•t =====
    richest = sorted(
        users_dict.items(),
        key=lambda kv: int(kv[1].get("ngan_phi", 0)),
        reverse=True
    )[:5]

    richest_lines = []
    for uid, u in richest:
        display_name = u.get("name", "")
        if not display_name:
            # fallback h·ªèi Discord n·∫øu ch∆∞a log t√™n
            try:
                user_obj = bot.get_user(int(uid))
                if user_obj:
                    display_name = user_obj.display_name or user_obj.name
                else:
                    user_obj = await bot.fetch_user(int(uid))
                    display_name = user_obj.display_name or user_obj.name
            except Exception:
                display_name = f"ID:{uid}"
        money_val = int(u.get("ngan_phi", 0))
        richest_lines.append(
            f"‚Ä¢ {display_name} ‚Äî üí∞ {money_val:,} Ng√¢n Phi·∫øu"
        )
    richest_text = "\n".join(richest_lines) if richest_lines else "_Kh√¥ng c√≥ d·ªØ li·ªáu._"

    # ===== 5. Ho·∫°t ƒë·ªông server: Top 10 guild =====
    # gom user theo guild_id
    guild_count = {}
    for u in users_dict.values():
        gid = str(u.get("guild_id", ""))
        if gid:
            guild_count[gid] = guild_count.get(gid, 0) + 1

    top_guilds = sorted(
        guild_count.items(),
        key=lambda kv: kv[1],
        reverse=True
    )[:10]

    guild_lines = []
    for gid, count in top_guilds:
        ginfo = guilds_dict.get(str(gid), {})
        gname = ginfo.get("name", f"Server {gid}")
        member_ct = int(ginfo.get("member_count", 0))
        guild_lines.append(
            f"‚Ä¢ {gname} ‚Äî üè† {member_ct:,} | üßô {count:,}"
        )

    if not guild_lines and guilds_dict:
        # fallback tr∆∞·ªùng h·ª£p ch∆∞a c√≥ user.guild_id
        for gid, ginfo in list(guilds_dict.items())[:10]:
            gname = ginfo.get("name", f"Server {gid}")
            mem_ct = int(ginfo.get("member_count", 0))
            guild_lines.append(
                f"‚Ä¢ {gname} ‚Äî üè† {mem_ct:,} | üßô 0"
            )
    guilds_text = "\n".join(guild_lines) if guild_lines else "_Kh√¥ng c√≥ d·ªØ li·ªáu server._"

    # ===== 6. T·ªïng ho·∫°t ƒë·ªông gameplay =====
    total_ol_all = 0
    total_odt_all = 0
    for uid, u in users_dict.items():
        st = u.get("stats", {})
        total_ol_all  += int(st.get("ol_count", 0))
        total_odt_all += int(st.get("odt_count", 0))

    # Top 5 spam ol nh·∫•t
    top_ol = sorted(
        users_dict.items(),
        key=lambda kv: int(kv[1].get("stats", {}).get("ol_count", 0)),
        reverse=True
    )[:5]
    top_ol_lines = []
    for uid, u in top_ol:
        st = u.get("stats", {})
        display_name = u.get("name", f"ID:{uid}")
        top_ol_lines.append(
            f"‚Ä¢ {display_name} ‚Äî üîç {int(st.get('ol_count',0))} l·∫ßn `ol`"
        )
    top_ol_text = "\n".join(top_ol_lines) if top_ol_lines else "_Kh√¥ng c√≥ d·ªØ li·ªáu._"

    # Top 5 ƒë·ªï th·∫°ch nhi·ªÅu nh·∫•t
    top_odt = sorted(
        users_dict.items(),
        key=lambda kv: int(kv[1].get("stats", {}).get("odt_count", 0)),
        reverse=True
    )[:5]
    top_odt_lines = []
    for uid, u in top_odt:
        st = u.get("stats", {})
        display_name = u.get("name", f"ID:{uid}")
        top_odt_lines.append(
            f"‚Ä¢ {display_name} ‚Äî ü™® {int(st.get('odt_count',0))} l·∫ßn `odt`"
        )
    top_odt_text = "\n".join(top_odt_lines) if top_odt_lines else "_Kh√¥ng c√≥ d·ªØ li·ªáu._"

    # ===== 7. Backup / dung l∆∞·ª£ng =====
    try:
        data_path = os.path.join(BASE_DATA_DIR, "data.json")
        size_kb = os.path.getsize(data_path) / 1024
        size_info = f"{size_kb:.2f} KB"
    except Exception:
        size_info = "Kh√¥ng x√°c ƒë·ªãnh"

    manual_dir = os.path.join(BASE_DATA_DIR, "backups", "manual")
    backup_files = []
    try:
        if os.path.isdir(manual_dir):
            for fn in os.listdir(manual_dir):
                if fn.endswith(".json"):
                    backup_files.append(fn)
        backup_count = len(backup_files)
    except Exception:
        backup_count = 0

    # ===== 8. Th·ªùi gian hi·ªán t·∫°i =====
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # ===== 9. Embed tr·∫£ v·ªÅ =====
    embed = discord.Embed(
        title="üìä TH·ªêNG K√ä D·ªÆ LI·ªÜU SERVER",
        description=f"C·∫≠p nh·∫≠t l√∫c: `{now_str}`",
        color=0x2ECC71
    )

    # Ng∆∞·ªùi ch∆°i
    embed.add_field(
        name="üë• Ng∆∞·ªùi ch∆°i",
        value=(
            f"‚Ä¢ T·ªïng: **{total_users:,}** ng∆∞·ªùi\n"
            f"‚Ä¢ Ho·∫°t ƒë·ªông 24h: **{active_24h:,}** ng∆∞·ªùi"
        ),
        inline=False
    )

    # Kinh t·∫ø
    embed.add_field(
        name="üí∞ Kinh t·∫ø Ng√¢n Phi·∫øu",
        value=(
            f"‚Ä¢ T·ªïng: {total_money:,}\n"
            f"‚Ä¢ TB / ng∆∞·ªùi: {avg_money:,.0f}"
        ),
        inline=False
    )

    # Ho·∫°t ƒë·ªông gameplay
    embed.add_field(
        name="üéÆ Ho·∫°t ƒë·ªông gameplay",
        value=(
            f"‚Ä¢ T·ªïng `ol` to√†n m√°y ch·ªß: {total_ol_all:,}\n"
            f"‚Ä¢ T·ªïng `odt` to√†n m√°y ch·ªß: {total_odt_all:,}"
        ),
        inline=False
    )

    # Top gi√†u
    embed.add_field(
        name="üèÜ Top 5 ng∆∞·ªùi gi√†u nh·∫•t",
        value=richest_text,
        inline=False
    )

    # Top `ol`
    embed.add_field(
        name="üîç Top 5 th√°m hi·ªÉm (`ol`)",
        value=top_ol_text,
        inline=False
    )

    # Top `odt`
    embed.add_field(
        name="ü™® Top 5 ƒë·ªï th·∫°ch (`odt`)",
        value=top_odt_text,
        inline=False
    )

    # Top server
    embed.add_field(
        name="üèò Top 10 m√°y ch·ªß Discord ho·∫°t ƒë·ªông",
        value=guilds_text,
        inline=False
    )

    # Backup
    embed.add_field(
        name="üì¶ Sao l∆∞u & dung l∆∞·ª£ng",
        value=(
            f"‚Ä¢ S·ªë file backup (manual): **{backup_count}**\n"
            f"‚Ä¢ data.json: {size_info}\n"
            f"‚Ä¢ Gi·ªõi h·∫°n gi·ªØ: 10 b·∫£n g·∫ßn nh·∫•t"
        ),
        inline=False
    )

    await ctx.reply(embed=embed, mention_author=False)







# =============================================================

@bot.command(name="testdata")
@owner_only()
@commands.cooldown(1, 5, commands.BucketType.user)
async def cmd_otestdata(ctx):
    """
    Ki·ªÉm tra nhanh d·ªØ li·ªáu hi·ªán ƒëang load trong volume:
    - S·ªë ng∆∞·ªùi ch∆°i
    - Li·ªát k√™ m·ªôt v√†i ID ƒë·∫ßu ti√™n
    Gi√∫p x√°c nh·∫≠n bot ƒëang ƒë·ªçc ƒë√∫ng /data/data.json sau restore.
    """
    data = load_data()
    users = data.get("users", {})
    count_users = len(users)

    # l·∫•y 3 id ƒë·∫ßu ti√™n n·∫øu c√≥
    preview_ids = list(users.keys())[:3]
    if preview_ids:
        sample_text = ", ".join(preview_ids)
    else:
        sample_text = "(kh√¥ng c√≥ user n√†o)"

    msg = (
        f"üì¶ Hi·ªán bot ƒëang ƒë·ªçc d·ªØ li·ªáu t·ª´ volume.\n"
        f"- S·ªë ng∆∞·ªùi ch∆°i ghi nh·∫≠n: **{count_users}**\n"
        f"- M·ªôt v√†i ID ƒë·∫ßu ti√™n: {sample_text}\n"
        f"- File data.json th·ª±c t·∫ø n·∫±m t·∫°i BASE_DATA_DIR: {BASE_DATA_DIR}"
    )

    await ctx.reply(msg, mention_author=False)


@bot.command(name="khoiphucfile")
@owner_only()
@commands.cooldown(1, 10, commands.BucketType.user)
async def cmd_khoiphucfile(ctx):
    """
    KH√îI PH·ª§C D·ªÆ LI·ªÜU T·ª™ FILE (DATA.JSON)
    -------------------------------------
    D√πng khi d·ªØ li·ªáu qu√° l·ªõn, kh√¥ng th·ªÉ d√°n JSON tr·ª±c ti·∫øp qua Discord.

    C√°ch d√πng:
    1Ô∏è‚É£ G√µ: okhoiphucfile
    2Ô∏è‚É£ G·ª≠i k√®m (attach) file data.json trong c√πng tin nh·∫Øn ho·∫∑c reply l·∫°i tin bot n√†y b·∫±ng file ƒë√≥.
    3Ô∏è‚É£ Bot s·∫Ω t·∫£i file ƒë√≥, backup volume hi·ªán t·∫°i, r·ªìi ghi ƒë√® /data/data.json.
    """

    # N·∫øu kh√¥ng c√≥ file ƒë√≠nh k√®m
    if not ctx.message.attachments:
        await ctx.reply(
            "üìÇ Vui l√≤ng g·ª≠i file `data.json` trong c√πng tin nh·∫Øn ho·∫∑c reply l·∫°i v·ªõi file ƒë√≥ ƒë·ªÉ kh√¥i ph·ª•c d·ªØ li·ªáu.",
            mention_author=False
        )
        return

    attach = ctx.message.attachments[0]
    filename = attach.filename.lower()

    # Ki·ªÉm tra t√™n file
    if not filename.endswith(".json"):
        await ctx.reply("‚ùó File ph·∫£i c√≥ ƒë·ªãnh d·∫°ng .json", mention_author=False)
        return

    # ƒê∆∞·ªùng d·∫´n volume th·ª±c t·∫ø
    json_path = os.path.join(BASE_DATA_DIR, "data.json")

    # B∆∞·ªõc 1: t·∫£i file v·ªÅ b·ªô nh·ªõ t·∫°m
    try:
        file_bytes = await attach.read()
        json_text = file_bytes.decode("utf-8")
        new_data = json.loads(json_text)
        if not isinstance(new_data, dict):
            raise ValueError("C·∫•u tr√∫c JSON kh√¥ng h·ª£p l·ªá.")
    except Exception as e:
        await ctx.reply(f"‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file JSON. L·ªói: {e}", mention_author=False)
        return

    # B∆∞·ªõc 2: Backup d·ªØ li·ªáu hi·ªán t·∫°i
    try:
        current_data = load_data()
        snapshot_data_v16(current_data, tag="before-import-file", subkey="manual")
    except Exception as e:
        await ctx.reply(f"‚ö†Ô∏è Kh√¥ng th·ªÉ backup d·ªØ li·ªáu hi·ªán t·∫°i: {e}", mention_author=False)

    # B∆∞·ªõc 3: Ghi ƒë√® data.json trong volume
    try:
        save_data(new_data)
    except Exception as e:
        await ctx.reply(f"‚ùå Ghi d·ªØ li·ªáu th·∫•t b·∫°i: {e}", mention_author=False)
        return

    # B∆∞·ªõc 4: X√°c nh·∫≠n
    after_data = load_data()
    count_users = len(after_data.get("users", {}))

    await ctx.reply(
        f"‚úÖ ƒê√É KH√îI PH·ª§C D·ªÆ LI·ªÜU T·ª™ FILE `{filename}` TH√ÄNH C√îNG!\n"
        f"- T·ªïng s·ªë ng∆∞·ªùi ch∆°i: **{count_users}**\n"
        f"- D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ghi v√†o volume t·∫°i `{json_path}`.\n"
        f"üëâ H√£y ch·∫°y `otestdata` ƒë·ªÉ ki·ªÉm tra l·∫°i.",
        mention_author=False
    )

# ==================SAO L∆ØU==================================





@bot.command(name="saoluu")
@owner_only()
@commands.cooldown(1, 5, commands.BucketType.user)
async def cmd_osaoluu(ctx):
    """
    T·∫°o backup th·ªß c√¥ng (manual) v√† t·ª± ƒë·ªông d·ªçn backup manual c≈©,
    ch·ªâ gi·ªØ l·∫°i MAX_MANUAL_BACKUPS b·∫£n m·ªõi nh·∫•t.
    """
    data = load_data()
    try:
        path = snapshot_data_v16(data, tag="manual", subkey="manual")

        # Sau khi t·∫°o backup m·ªõi, d·ªçn b·ªõt backup manual c≈© n·∫øu qu√° gi·ªõi h·∫°n
        try:
            _cleanup_old_backups_limit()
        except Exception as cle:
            print(f"[AUTO-BACKUP-CLEANUP] L·ªói khi d·ªçn sau osaoluu: {cle}")

        await ctx.reply(
            f"‚úÖ ƒê√£ t·∫°o b·∫£n sao l∆∞u: `{os.path.basename(path)}`\n"
            f"üîÅ H·ªá th·ªëng gi·ªØ t·ªëi ƒëa {MAX_MANUAL_BACKUPS} b·∫£n manual m·ªõi nh·∫•t.",
            mention_author=False
        )

    except Exception as e:
        await ctx.reply(
            f"‚ö†Ô∏è Sao l∆∞u th·∫•t b·∫°i: {e}",
            mention_author=False
        )


# ===================SAO L∆ØU========================



# =================L·ªÜNH THAY ƒê·ªîI TH·ªúI GIAN SAO L∆ØU T·ª∞ ƒê·ªòNG======================


@bot.command(name="thoigiansaoluu", aliases=["backupconfig"])
@owner_only()
@commands.cooldown(1, 5, commands.BucketType.user)
async def cmd_thoigiansaoluu(ctx, backup_minutes: int = None, report_minutes: int = None):
    """
    C·∫•u h√¨nh h·ªá th·ªëng auto backup:
    - backup_minutes: m·ªói bao nhi√™u ph√∫t th√¨ t·∫°o 1 b·∫£n backup m·ªõi.
    - report_minutes: m·ªói bao nhi√™u ph√∫t th√¨ cho ph√©p g·ª≠i 1 th√¥ng b√°o v√†o k√™nh.

    V√≠ d·ª•:
    `thoigiansaoluu 10 60`
    -> Sao l∆∞u m·ªói 10 ph√∫t
    -> Ch·ªâ b√°o l√™n k√™nh m·ªói 60 ph√∫t (√≠t spam th√¥ng b√°o)

    N·∫øu b·∫°n g·ªçi kh√¥ng ƒë·ªß tham s·ªë, bot s·∫Ω ch·ªâ hi·ªÉn th·ªã c·∫•u h√¨nh hi·ªán t·∫°i.
    """

    global AUTO_BACKUP_INTERVAL_MINUTES
    global AUTO_REPORT_INTERVAL_MINUTES

    # N·∫øu kh√¥ng truy·ªÅn tham s·ªë -> ch·ªâ show c·∫•u h√¨nh hi·ªán t·∫°i
    if backup_minutes is None or report_minutes is None:
        await ctx.reply(
            "üìä C·∫•u h√¨nh Auto Backup hi·ªán t·∫°i:\n"
            f"- Chu k·ª≥ backup: {AUTO_BACKUP_INTERVAL_MINUTES} ph√∫t/l·∫ßn\n"
            f"- Chu k·ª≥ b√°o c√°o: {AUTO_REPORT_INTERVAL_MINUTES} ph√∫t/l·∫ßn\n"
            "üëâ D√πng: `thoigiansaoluu <ph√∫t_backup> <ph√∫t_b√°o>`\n"
            "V√≠ d·ª•: `thoigiansaoluu 10 60`",
            mention_author=False
        )
        return

    # Validate
    if backup_minutes < 1:
        await ctx.reply("‚ùó Chu k·ª≥ backup ph·∫£i >= 1 ph√∫t.", mention_author=False)
        return
    if report_minutes < 1:
        await ctx.reply("‚ùó Chu k·ª≥ b√°o c√°o ph·∫£i >= 1 ph√∫t.", mention_author=False)
        return

    # C·∫≠p nh·∫≠t gi√° tr·ªã
    AUTO_BACKUP_INTERVAL_MINUTES = backup_minutes
    AUTO_REPORT_INTERVAL_MINUTES = report_minutes

    # reset b·ªô ƒë·∫øm ph√∫t ƒë·ªÉ √°p d·ª•ng ngay
    if hasattr(auto_backup_task, "_minutes_since_backup"):
        auto_backup_task._minutes_since_backup = 0

    await ctx.reply(
        "‚úÖ ƒê√É C·∫¨P NH·∫¨T C·∫§U H√åNH AUTO BACKUP!\n"
        f"- Sao l∆∞u m·ªói **{AUTO_BACKUP_INTERVAL_MINUTES} ph√∫t/l·∫ßn**\n"
        f"- G·ª≠i th√¥ng b√°o t·ªëi ƒëa m·ªói **{AUTO_REPORT_INTERVAL_MINUTES} ph√∫t/l·∫ßn**\n"
        "üì¶ L∆∞u √Ω: Bot s·∫Ω √°p d·ª•ng c·∫•u h√¨nh m·ªõi ngay l·∫≠p t·ª©c.",
        mention_author=False
    )

# =================L·ªÜNH THAY ƒê·ªîI TH·ªúI GIAN SAO L∆ØU T·ª∞ ƒê·ªòNG======================







@bot.command(name="listbackup")
@owner_only()
@commands.cooldown(1, 5, commands.BucketType.user)
async def cmd_olistbackup(ctx, limit: int = 10):
    recents = list_recent_backups_v16(limit=limit)
    if not recents:
        return await ctx.reply(
            "Kh√¥ng t√¨m th·∫•y b·∫£n sao l∆∞u n√†o.",
            mention_author=False
        )
    lines = ["**C√°c b·∫£n sao l∆∞u g·∫ßn ƒë√¢y:**"]
    for ts, key, path in recents:
        base = os.path.basename(path)
        lines.append(f"- `{base}` ‚Äî **{key}**")
    await ctx.reply("\n".join(lines), mention_author=False)

@bot.command(name="xemsaoluu")
@owner_only()
@commands.cooldown(1, 5, commands.BucketType.user)
async def cmd_oxemsaoluu(ctx):
    st = total_backup_stats_v16()
    mb = st["bytes"] / (1024*1024) if st["bytes"] else 0.0
    latest = os.path.basename(st["latest"]) if st["latest"] else "‚Äî"
    msg = (
        f"**Th·ªëng k√™ backup**\n"
        f"- S·ªë file: **{st['files']}**\n"
        f"- Dung l∆∞·ª£ng: **{mb:.2f} MB**\n"
        f"- G·∫ßn nh·∫•t: `{latest}`"
    )
    await ctx.reply(msg, mention_author=False)

@bot.command(name="batanh")
@owner_only()
@commands.cooldown(1, 5, commands.BucketType.user)
async def cmd_batanh(ctx, mode: str = None):
    data = load_data()
    cfg = data.setdefault("config", {})
    if mode is None:
        status = "B·∫¨T" if cfg.get("images_enabled", True) else "T·∫ÆT"
        await ctx.reply(
            f"Hi·ªÉn th·ªã ·∫£nh hi·ªán t·∫°i: {status}",
            mention_author=False
        )
        return
    m = (mode or "").strip().lower()
    if m in ("on","b·∫≠t","bat","enable","enabled","true","1"):
        cfg["images_enabled"] = True
        save_data(data)
        await ctx.reply(
            "‚úÖ ƒê√£ B·∫¨T hi·ªÉn th·ªã ·∫£nh.",
            mention_author=False
        )
        return
    if m in ("off","t·∫Øt","tat","disable","disabled","false","0"):
        cfg["images_enabled"] = False
        save_data(data)
        await ctx.reply(
            "‚úÖ ƒê√£ T·∫ÆT hi·ªÉn th·ªã ·∫£nh.",
            mention_author=False
        )
        return
    await ctx.reply(
        "D√πng: `obatanh on` ho·∫∑c `obatanh off`.",
        mention_author=False
    )

@bot.command(name="addtien")
@owner_only()
@commands.cooldown(1, 5, commands.BucketType.user)
async def cmd_addtien(ctx, member: discord.Member, so: str):
    try:
        amount = int(str(so).replace(",", "").strip())
        if amount <= 0:
            raise ValueError()
    except Exception:
        await ctx.reply(
            "‚ö†Ô∏è S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá. V√≠ d·ª•: `oaddtien @user 1,000,000`.",
            mention_author=False
        )
        return
    data = load_data()
    u, path = _get_user_ref(data, member)
    bal = get_balance(u)
    set_balance(u, bal + amount)
    save_data(data)
    await ctx.reply(
        f"‚úÖ C·ªông `{format_num(amount)}` NP cho `{member.display_name}` ‚Äî T·ªïng: `{format_num(get_balance(u))}`",
        mention_author=False
    )

@bot.command(name="addruong")
@owner_only()
@commands.cooldown(1, 5, commands.BucketType.user)
async def cmd_addruong(ctx, member: discord.Member, pham: str, so: str):
    pham = pham.strip().upper()
    if pham not in {"D","C","B","A","S"}:
        await ctx.reply(
            "Ph·∫©m r∆∞∆°ng kh√¥ng h·ª£p l·ªá. D√πng: D/C/B/A/S",
            mention_author=False
        )
        return
    try:
        amount = int(str(so).replace(",", "").strip())
        if amount <= 0:
            raise ValueError()
    except Exception:
        await ctx.reply(
            "‚ö†Ô∏è S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá. V√≠ d·ª•: `oaddruong @user S 3`.",
            mention_author=False
        )
        return
    if amount > 10:
        await ctx.reply(
            "‚ö†Ô∏è T·ªëi ƒëa **10 r∆∞∆°ng** m·ªói l·∫ßn.",
            mention_author=False
        )
        return
    data = load_data()
    u, path = _get_user_ref(data, member)
    r = ensure_rungs(u)
    r[pham] = int(r.get(pham, 0)) + amount
    save_data(data)
    await ctx.reply(
        f"‚úÖ ƒê√£ c·∫•p `{format_num(amount)}` r∆∞∆°ng **{pham}** cho `{member.display_name}` ‚Äî T·ªïng: `{format_num(r[pham])}`",
        mention_author=False
    )

@bot.command(name="xtien")
@owner_only()
@commands.cooldown(1, 3, commands.BucketType.user)
async def cmd_oxtien(ctx, member: discord.Member):
    data = load_data()
    u, path = _get_user_ref(data, member)
    keys = {k: u[k] for k in ("ngan_phi","ngan_phieu") if k in u}
    rinfo = u.get("rungs", {})
    bal = int(u.get("ngan_phi", u.get("ngan_phieu", 0)))
    await ctx.reply(
        f"üß© Path: **{path}**\n"
        f"üí∞ S·ªë d∆∞: **{format_num(bal)}** (keys: {keys})\n"
        f"üéÅ R∆∞∆°ng: {rinfo}",
        mention_author=False
    )


#===========PH·ª§C H·ªíI==========================
@bot.command(name="phuchoi")
@owner_only()
@commands.cooldown(1, 10, commands.BucketType.user)
async def cmd_phuchoi(ctx, filename: str = None):
    # B·∫Øt bu·ªôc ph·∫£i ch·ªâ ƒë·ªãnh file .json
    if not filename:
        await ctx.reply(
            "‚ö†Ô∏è D√πng ƒë√∫ng c√∫ ph√°p:\n"
            "`ophuchoi <t√™n_file.json>`\n"
            "V√≠ d·ª•: `ophuchoi data.json.v16.auto.20251030-153211.json`",
            mention_author=False
        )
        return

    data = load_data()

    # backup tr∆∞·ªõc khi restore
    try:
        snapshot_data_v16(data, tag="before-restore", subkey="before_restore")
    except Exception:
        pass

    BACKUP_DIR_ROOT = os.path.join(BASE_DATA_DIR, "backups")
    cand = os.path.join(BACKUP_DIR_ROOT, filename)

    if not os.path.isfile(cand):
        await ctx.reply(
            "‚ùå Kh√¥ng t√¨m th·∫•y file backup v·ªõi t√™n ƒë√≥. "
            "H√£y d√πng `olistbackup` ƒë·ªÉ xem danh s√°ch file h·ª£p l·ªá.",
            mention_author=False
        )
        return

    try:
        with open(cand, "r", encoding="utf-8") as f:
            restored = json.load(f)
        save_data(restored)
        await ctx.reply(
            f"‚úÖ ƒê√É KH√îI PH·ª§C D·ªÆ LI·ªÜU T·ª™ `{filename}` TH√ÄNH C√îNG.",
            mention_author=False
        )
    except Exception as e:
        await ctx.reply(
            f"‚ùå Kh√¥i ph·ª•c th·∫•t b·∫°i: {e}",
            mention_author=False
        )
#===========PH·ª§C H·ªíI==========================



#===========resetdata========================


@bot.command(name="resetdata")
@owner_only()
@commands.cooldown(1, 10, commands.BucketType.user)
async def cmd_resetdata(ctx):
    data = load_data()
    try:
        snapshot_data_v16(data, tag="before-resetdata", subkey="before_resetdata")
    except Exception:
        pass
    new_data = {}
    if "guild_settings" in data:
        new_data["guild_settings"] = data["guild_settings"]
    if "config" in data and isinstance(data["config"], dict):
        new_data["config"] = data["config"]
    if "server_cfg" in data and isinstance(data["server_cfg"], dict):
        new_data["server_cfg"] = data["server_cfg"]
    save_data(new_data)
    await ctx.reply(
        "‚úÖ ƒê√£ reset d·ªØ li·ªáu (gi·ªØ c·∫•u h√¨nh k√™nh & thi·∫øt l·∫≠p ·∫£nh).",
        mention_author=False
    )

@bot.command(name="resetuser")
@owner_only()
@commands.cooldown(1, 10, commands.BucketType.user)
async def cmd_resetuser(ctx, member: discord.Member):
    data = load_data()
    try:
        snapshot_data_v16(data, tag="before-resetuser", subkey="before_resetuser")
    except Exception:
        pass
    users = data.setdefault("users", {})
    uid = str(member.id)
    had = users.pop(uid, None)
    save_data(data)
    if had is not None:
        await ctx.reply(
            f"‚úÖ ƒê√£ reset d·ªØ li·ªáu: `{member.display_name}`.",
            mention_author=False
        )
    else:
        await ctx.reply(
            f"Ng∆∞·ªùi ch∆°i `{member.display_name}` ch∆∞a c√≥ d·ªØ li·ªáu.",
            mention_author=False
        )


# ======================
# üßç KHU V·ª∞C: NH√ÇN V·∫¨T (module-style)
# ======================
@bot.command(name="nhanvat", aliases=["onhanvat"])
@commands.cooldown(1, 5, commands.BucketType.user)
async def cmd_onhanvat(ctx, member: discord.Member=None):
    target = member or ctx.author
    user_id = str(target.id)
    data = ensure_user(user_id)
    user = data["users"][user_id]

    equip_lines=[]
    for slot, iid in user["equipped"].items():
        if iid:
            it = next((x for x in user["items"] if x["id"]==iid), None)
            if it:
                equip_lines.append(
                    f"{RARITY_EMOJI[it['rarity']]} `{it['id']}` {it['name']} ‚Äî {it['type']}"
                )

    emb = make_embed(
        f"üß≠ Nh√¢n v·∫≠t ‚Äî {target.display_name}",
        color=0x9B59B6,
        footer=f"Y√™u c·∫ßu b·ªüi {ctx.author.display_name}"
    )
    emb.add_field(
        name=f"{NP_EMOJI} Ng√¢n Phi·∫øu",
        value=format_num(user.get('ngan_phi',0)),
        inline=True
    )
    emb.add_field(
        name="Trang b·ªã ƒëang m·∫∑c",
        value="\n".join(equip_lines) if equip_lines else "Kh√¥ng c√≥",
        inline=False
    )

    if images_enabled_global():
        try:
            file = await file_from_url_cached(IMG_NHAN_VAT, "nhanvat.png")
            emb.set_image(url="attachment://nhanvat.png")
            await ctx.send(embed=emb, file=file)
            return
        except Exception:
            pass
    await ctx.send(embed=emb)

# =======================
# üõ°Ô∏è KHU V·ª∞C: TRANG B·ªä (module-style)
# =======================
def slot_of(item_type: str):
    return "slot_aogiap" if item_type == "√Åo Gi√°p" else "slot_vukhi"

class KhoView(discord.ui.View):
    def __init__(self, author_id:int, items:list, page:int=0, per_page:int=10, timeout:float=180.0):
        super().__init__(timeout=timeout)
        self.author_id = author_id
        self.items = items
        self.page = page
        self.per_page = per_page
        self.max_page = max(0, (len(items)-1)//per_page)
        self.children[0].disabled = (self.page==0)
        self.children[1].disabled = (self.page==self.max_page)

    def slice(self):
        a = self.page*self.per_page
        b = a+self.per_page
        return self.items[a:b]

    async def update_msg(self, interaction: discord.Interaction):
        if interaction.user.id != self.author_id:
            await interaction.response.send_message(
                "‚ùó Ch·ªâ ch·ªß kho m·ªõi thao t√°c ƒë∆∞·ª£c.",
                ephemeral=True
            )
            return
        content = "\n".join([
            f"{RARITY_EMOJI[it['rarity']]} `{it['id']}` {it['name']} ‚Äî {it['type']}"
            for it in self.slice()
        ]) or "Kh√¥ng c√≥ v·∫≠t ph·∫©m"
        emb = interaction.message.embeds[0]
        emb.set_field_at(2, name="Trang b·ªã", value=content, inline=False)
        emb.set_footer(text=f"Trang {self.page+1}/{self.max_page+1}")
        self.children[0].disabled = (self.page==0)
        self.children[1].disabled = (self.page==self.max_page)
        await interaction.response.edit_message(embed=emb, view=self)

    @discord.ui.button(label="‚óÄ Tr∆∞·ªõc", style=discord.ButtonStyle.secondary)
    async def prev(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.page>0:
            self.page -= 1
        await self.update_msg(interaction)

    @discord.ui.button(label="Ti·∫øp ‚ñ∂", style=discord.ButtonStyle.secondary)
    async def next(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.page<self.max_page:
            self.page += 1
        await self.update_msg(interaction)

@bot.command(name="kho", aliases=["okho"])
@commands.cooldown(1, 5, commands.BucketType.user)
async def cmd_okho(ctx):
    user_id = str(ctx.author.id)
    data = ensure_user(user_id)
    user = data["users"][user_id]

    items_show = [it for it in user["items"] if not it["equipped"]]
    page_items = items_show[:10]
    content = "\n".join([
        f"{RARITY_EMOJI[it['rarity']]} `{it['id']}` {it['name']} ‚Äî {it['type']}"
        for it in page_items
    ]) or "Kh√¥ng c√≥ v·∫≠t ph·∫©m"
    page_total = max(1, (len(items_show) - 1)//10 + 1)

    emb = make_embed(
        f"üì¶ {ctx.author.display_name} ‚Äî Kho nh√¢n v·∫≠t",
        color=0x3498DB,
        footer=f"Trang 1/{page_total}"
    )
    total_r = sum(int(user["rungs"][k]) for k in ["D","C","B","A","S"])
    rtext = (
        f"{RARITY_CHEST_EMOJI['D']} {format_num(user['rungs']['D'])}   "
        f"{RARITY_CHEST_EMOJI['C']} {format_num(user['rungs']['C'])}   "
        f"{RARITY_CHEST_EMOJI['B']} {format_num(user['rungs']['B'])}   "
        f"{RARITY_CHEST_EMOJI['A']} {format_num(user['rungs']['A'])}   "
        f"{RARITY_CHEST_EMOJI['S']} {format_num(user['rungs']['S'])}"
    )
    emb.add_field(
        name=f"R∆∞∆°ng hi·ªán c√≥ ‚Äî {format_num(total_r)}",
        value=rtext,
        inline=False
    )
    emb.add_field(
        name=f"{NP_EMOJI} Ng√¢n phi·∫øu hi·ªán c√≥: {format_num(user['ngan_phi'])}",
        value="\u200b",
        inline=True
    )
    emb.add_field(name="Trang b·ªã", value=content, inline=False)

    stats_text = (
        f"R∆∞∆°ng ƒë√£ m·ªü: {format_num(user['stats']['opened'])}\n"
        f"S·ªë l·∫ßn th√°m hi·ªÉm: {format_num(user['stats']['ol_count'])}\n"
        f"{NP_EMOJI}T·ªïng NP ƒë√£ ki·∫øm ƒë∆∞·ª£c: {format_num(user['stats']['ngan_phi_earned_total'])}"
    )
    emb.add_field(name="üìä Th·ªëng k√™", value=stats_text, inline=False)

    if images_enabled_global():
        try:
            file = await file_from_url_cached(IMG_KHO_DO, "khodo.png")
            emb.set_image(url="attachment://khodo.png")
            view = KhoView(ctx.author.id, items_show, page=0, per_page=10)
            view.children[0].disabled = True
            view.children[1].disabled = (len(items_show) <= 10)
            msg = await ctx.send(embed=emb, file=file, view=view)
            try:
                await asyncio.sleep(3)
                emb.set_image(url=discord.Embed.Empty)
                try:
                    await msg.edit(embed=emb, attachments=[], view=view)
                except TypeError:
                    await msg.edit(embed=emb, view=view)
            except Exception:
                pass
            return
        except Exception:
            pass

    view = KhoView(ctx.author.id, items_show, page=0, per_page=10)
    view.children[0].disabled = True
    view.children[1].disabled = (len(items_show) <= 10)
    await ctx.send(embed=emb, view=view)

@bot.command(name="mac", aliases=["omac"])
@commands.cooldown(1, 5, commands.BucketType.user)
async def cmd_omac(ctx, item_id: str = None):
    if item_id is None:
        await ctx.reply(
            "üìù C√°ch d√πng: `mac <ID>` (Xem ID trong `okho`).",
            mention_author=False
        )
        return
    user_id = str(ctx.author.id)
    data = ensure_user(user_id)
    user = data["users"][user_id]
    target = next((it for it in user["items"] if it["id"] == item_id), None)
    if not target:
        await ctx.reply(
            "‚ùó Kh√¥ng t√¨m th·∫•y v·∫≠t ph·∫©m v·ªõi ID ƒë√≥.",
            mention_author=False
        )
        return
    if target["equipped"]:
        await ctx.reply(
            "V·∫≠t ph·∫©m ƒëang ƒë∆∞·ª£c m·∫∑c.",
            mention_author=False
        )
        return

    slot = slot_of(target["type"])
    if user["equipped"][slot]:
        cur_id = user["equipped"][slot]
        cur_item = next((it for it in user["items"] if it["id"] == cur_id), None)
        await ctx.reply(
            f"üîß Slot ƒëang b·∫≠n b·ªüi **{cur_item['name']}** (ID {cur_item['id']}). "
            f"H√£y d√πng `othao {cur_item['id']}` ƒë·ªÉ th√°o.",
            mention_author=False
        )
        return

    target["equipped"] = True
    user["equipped"][slot] = target["id"]
    save_data(data)

    emoji = RARITY_EMOJI[target["rarity"]]
    emb = make_embed(
        title="ü™Ñ M·∫∑c trang b·ªã",
        description=f"B·∫°n m·∫∑c {emoji} **{target['name']}** (ID `{target['id']}`)",
        color=RARITY_COLOR[target["rarity"]],
        footer=f"{ctx.author.display_name}"
    )
    await ctx.send(embed=emb)

@bot.command(name="thao", aliases=["othao"])
@commands.cooldown(1, 5, commands.BucketType.user)
async def cmd_othao(ctx, item_id: str = None):
    if item_id is None:
        await ctx.reply(
            "üìù C√°ch d√πng: `thao <ID>` (Xem ID trong `okho`).",
            mention_author=False
        )
        return
    user_id = str(ctx.author.id)
    data = ensure_user(user_id)
    user = data["users"][user_id]
    target = next((it for it in user["items"] if it["id"] == item_id), None)
    if not target:
        await ctx.reply(
            "‚ùó Kh√¥ng t√¨m th·∫•y v·∫≠t ph·∫©m v·ªõi ID ƒë√≥.",
            mention_author=False
        )
        return
    if not target["equipped"]:
        await ctx.reply(
            "V·∫≠t ph·∫©m kh√¥ng ƒëang m·∫∑c.",
            mention_author=False
        )
        return

    slot = slot_of(target["type"])
    user["equipped"][slot] = None
    target["equipped"] = False
    save_data(data)

    emoji = RARITY_EMOJI[target["rarity"]]
    emb = make_embed(
        title="ü™∂ Th√°o trang b·ªã",
        description=(
            f"ƒê√£ th√°o {emoji} **{target['name']}** "
            f"(ID `{target['id']}`) ‚Üí ki·ªÉm tra l·∫°i Kho."
        ),
        color=0x95A5A6,
        footer=f"{ctx.author.display_name}"
    )
    await ctx.send(embed=emb)

@bot.command(name="xem", aliases=["oxem"])
@commands.cooldown(1, 5, commands.BucketType.user)
async def cmd_oxem(ctx, item_id: str = None):
    if item_id is None:
        await ctx.reply(
            "üìù C√°ch d√πng: `xem <ID>` (Xem ID trong `okho`).",
            mention_author=False
        )
        return
    user_id = str(ctx.author.id)
    data = ensure_user(user_id)
    user = data["users"][user_id]

    it = next((x for x in user["items"] if x["id"] == item_id), None)
    if not it:
        await ctx.reply(
            "‚ùó Kh√¥ng t√¨m th·∫•y trang b·ªã v·ªõi ID ƒë√≥.",
            mention_author=False
        )
        return

    state = "ƒêang m·∫∑c" if it["equipped"] else "Trong kho"
    emoji = RARITY_EMOJI[it["rarity"]]
    emb = make_embed(
        title=f"{emoji} `{it['id']}` {it['name']}",
        description=(
            f"Lo·∫°i: **{it['type']}** ‚Ä¢ Ph·∫©m: {emoji} ‚Ä¢ "
            f"Tr·∫°ng th√°i: **{state}**"
        ),
        color=RARITY_COLOR[it["rarity"]],
        footer=ctx.author.display_name
    )

    img_url = ITEM_IMAGE.get(it["type"], IMG_BANDO_DEFAULT)
    if images_enabled_global():
        try:
            file = await file_from_url_cached(img_url, "item.png")
            emb.set_image(url="attachment://item.png")
            await ctx.send(embed=emb, file=file)
            return
        except Exception:
            pass
    await ctx.send(embed=emb)

# ===================
# üí∞ KHU V·ª∞C: KINH T·∫æ (module-style)
# ===================
COOLDOWN_OL = 10

def _rarity_order_index(r: str) -> int:
    order = ["S","A","B","C","D"]
    try:
        return order.index(r)
    except ValueError:
        return 99

def _pick_highest_available_rarity(user) -> str | None:
    for r in ["S","A","B","C","D"]:
        if int(user["rungs"].get(r, 0)) > 0:
            return r
    return None

def _open_one_chest(user, r: str):
    user["rungs"][r] = int(user["rungs"].get(r, 0)) - 1
    gp = get_nganphieu(r)
    user["ngan_phi"] = int(user.get("ngan_phi", 0)) + gp
    user.setdefault("stats", {})
    user["stats"]["ngan_phi_earned_total"] = int(
        user["stats"].get("ngan_phi_earned_total", 0)
    ) + gp
    user["stats"]["opened"] = int(user["stats"].get("opened", 0)) + 1

    item = None
    try:
        if PROB_ITEM_IN_RUONG and (random.random() < PROB_ITEM_IN_RUONG):
            item = generate_item(r, user["items"])
            user["items"].append(item)
    except Exception:
        pass
    return gp, item

def _fmt_item_line(it) -> str:
    return (
        f"{RARITY_EMOJI[it['rarity']]} `{it['id']}` {it['name']} "
        f"‚Äî Gi√° tr·ªã: {format_num(it['value'])}"
    )



#==========OL========================

@bot.command(name="l", aliases=["ol"])
async def cmd_ol(ctx):
    user_id = str(ctx.author.id)
    data = ensure_user(user_id)
    user = data["users"][user_id]

    # c·∫≠p nh·∫≠t danh t√≠nh / ho·∫°t ƒë·ªông
    touch_user_activity(ctx, user)

    now = time.time()
    if now < user["cooldowns"]["ol"]:
        await ctx.reply(
            f"‚è≥ H√£y ch·ªù {int(user['cooldowns']['ol'] - now)} gi√¢y n·ªØa.",
            mention_author=False
        )
        return

    rarity = choose_rarity()
    map_loc = random.choice(MAP_POOL)

    # user loot ƒë∆∞·ª£c r∆∞∆°ng
    user["rungs"][rarity] += 1
    # ƒë·∫øm s·ªë l·∫ßn ƒëi th√°m hi·ªÉm
    user["stats"]["ol_count"] = int(user["stats"].get("ol_count", 0)) + 1

    # cooldown
    user["cooldowns"]["ol"] = now + COOLDOWN_OL

    save_data(data)

    rarity_name = {
        "D":"Ph·ªï Th√¥ng",
        "C":"Hi·∫øm",
        "B":"Tuy·ªát Ph·∫©m",
        "A":"S·ª≠ Thi",
        "S":"Truy·ªÅn Thuy·∫øt"
    }[rarity]

    title = (
        f"**[{map_loc}]** **{ctx.author.display_name}** Thu ƒë∆∞·ª£c R∆∞∆°ng "
        f"trang b·ªã {rarity_name} {RARITY_CHEST_EMOJI[rarity]} x1"
    )
    desc = get_loot_description(map_loc, rarity)
    emb = make_embed(
        title=title,
        description=desc,
        color=RARITY_COLOR[rarity],
        footer=ctx.author.display_name
    )

    if images_enabled_global():
        try:
            emb.set_image(url=MAP_IMAGES.get(rarity, IMG_BANDO_DEFAULT))
        except Exception:
            pass

    msg = await ctx.send(embed=emb)

    try:
        await asyncio.sleep(3)
        if emb.image:
            emb.set_image(url=discord.Embed.Empty)
            await msg.edit(embed=emb)
    except Exception:
        pass
#==========OL========================


#==========OM========================


@bot.command(name="mo", aliases=["omo"])
@commands.cooldown(1, 5, commands.BucketType.user)
async def cmd_omo(ctx, *args):
    user_id = str(ctx.author.id)
    data = ensure_user(user_id)
    user = data["users"][user_id]
    argv = [a.strip().lower() for a in args]

    def _open_many_for_rarity(user, r: str, limit: int = 50):
        opened = 0
        total_np = 0
        items = []
        while (opened < limit) and (int(user["rungs"].get(r, 0)) > 0):
            gp, it = _open_one_chest(user, r)
            opened += 1
            total_np += gp
            if it:
                items.append(it)
        return opened, total_np, items

    # omo all
    if len(argv) == 1 and argv[0] == "all":
        LIMIT = 50
        opened = 0
        total_np = 0
        items = []
        per_rarity = {"S":0,"A":0,"B":0,"C":0,"D":0}
        highest_seen = None

        for r in ["S","A","B","C","D"]:
            while (opened < LIMIT) and (int(user["rungs"].get(r, 0)) > 0):
                gp, it = _open_one_chest(user, r)
                opened += 1
                total_np += gp
                per_rarity[r] += 1
                if it:
                    items.append(it)
                    if (
                        (highest_seen is None)
                        or (_rarity_order_index(it["rarity"]) < _rarity_order_index(highest_seen))
                    ):
                        highest_seen = it["rarity"]

        if opened == 0:
            await ctx.reply(
                "‚ùó B·∫°n kh√¥ng c√≥ r∆∞∆°ng ƒë·ªÉ m·ªü.",
                mention_author=False
            )
            return

        highest_for_title = highest_seen
        if not highest_for_title:
            for r in ["S","A","B","C","D"]:
                if per_rarity[r] > 0:
                    highest_for_title = r
                    break

        title_emoji = RARITY_CHEST_OPENED_EMOJI.get(highest_for_title or "D", "üéÅ")
        title = f"{title_emoji} **{ctx.author.display_name}** ƒë√£ m·ªü x{opened} r∆∞∆°ng"
        emb = make_embed(
            title=title,
            color=0x2ECC71,
            footer=ctx.author.display_name
        )

        rewards_block = (
            f"{NP_EMOJI}\u2003Ng√¢n Phi·∫øu: **{format_num(total_np)}**\n"
            f"{EMOJI_TRANG_BI_COUNT}\u2003Trang b·ªã: **{len(items)}**"
        )
        emb.add_field(
            name="Ph·∫ßn th∆∞·ªüng nh·∫≠n ƒë∆∞·ª£c",
            value=rewards_block,
            inline=False
        )

        breakdown_lines = [
            f"{RARITY_EMOJI[r]} x{per_rarity[r]}"
            for r in ["S","A","B","C","D"]
            if per_rarity[r] > 0
        ]
        if breakdown_lines:
            emb.add_field(
                name="ƒê√£ m·ªü",
                value="  ".join(breakdown_lines),
                inline=False
            )

        if items:
            lines = [_fmt_item_line(it) for it in items]
            if len(lines) > 10:
                extra = len(lines) - 10
                lines = lines[:10] + [f"... v√† {extra} m√≥n kh√°c"]
            emb.add_field(
                name="V·∫≠t ph·∫©m nh·∫≠n ƒë∆∞·ª£c",
                value="\n".join(lines),
                inline=False
            )

        remaining = sum(
            int(user["rungs"].get(r, 0))
            for r in ["S","A","B","C","D"]
        )
        if remaining > 0:
            emb.set_footer(
                text=(
                    f"C√≤n {remaining} r∆∞∆°ng ‚Äî d√πng omo all ho·∫∑c "
                    f"omo <ph·∫©m> all ƒë·ªÉ m·ªü ti·∫øp"
                )
            )

        save_data(data)
        await ctx.send(embed=emb)
        return

    # omo <rarity> [all / num]
    if (len(argv) >= 1) and (argv[0] in {"d","c","b","a","s"}):
        r = argv[0].upper()
        available = int(user["rungs"].get(r, 0))
        if available <= 0:
            await ctx.reply(
                f"‚ùó B·∫°n kh√¥ng c√≥ r∆∞∆°ng ph·∫©m {r}.",
                mention_author=False
            )
            return

        req = 1
        if len(argv) >= 2:
            if argv[1] == "all":
                req = min(50, available)
            else:
                try:
                    req = int(argv[1].replace(",", ""))
                except Exception:
                    await ctx.reply(
                        "‚ö†Ô∏è S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá. V√≠ d·ª•: `omo d 3` ho·∫∑c `omo d all`.",
                        mention_author=False
                    )
                    return
                if req <= 0:
                    await ctx.reply(
                        "‚ö†Ô∏è S·ªë l∆∞·ª£ng ph·∫£i > 0.",
                        mention_author=False
                    )
                    return
                if req > 50:
                    await ctx.reply(
                        "‚ö†Ô∏è M·ªói l·∫ßn ch·ªâ m·ªü t·ªëi ƒëa **50** r∆∞∆°ng.",
                        mention_author=False
                    )
                    return
                if req > available:
                    await ctx.reply(
                        f"‚ö†Ô∏è B·∫°n ch·ªâ c√≥ **{available}** r∆∞∆°ng {r}.",
                        mention_author=False
                    )
                    return

        opened, total_np, items = _open_many_for_rarity(user, r, limit=req)
        if opened == 0:
            await ctx.reply(
                "‚ùó Kh√¥ng m·ªü ƒë∆∞·ª£c r∆∞∆°ng n√†o.",
                mention_author=False
            )
            return

        title_emoji = RARITY_CHEST_OPENED_EMOJI.get(r, "üéÅ")
        title = f"{title_emoji} **{ctx.author.display_name}** ƒë√£ m·ªü x{opened} r∆∞∆°ng"
        emb = make_embed(
            title=title,
            color=RARITY_COLOR.get(r, 0x95A5A6),
            footer=ctx.author.display_name
        )

        rewards_block = (
            f"{NP_EMOJI}\u2003Ng√¢n Phi·∫øu: **{format_num(total_np)}**\n"
            f"{EMOJI_TRANG_BI_COUNT}\u2003Trang b·ªã: **{len(items)}**"
        )
        emb.add_field(
            name="Ph·∫ßn th∆∞·ªüng nh·∫≠n ƒë∆∞·ª£c",
            value=rewards_block,
            inline=False
        )

        if items:
            lines = [_fmt_item_line(it) for it in items]
            if len(lines) > 10:
                extra = len(lines) - 10
                lines = lines[:10] + [f"... v√† {extra} m√≥n kh√°c"]
            emb.add_field(
                name="V·∫≠t ph·∫©m nh·∫≠n ƒë∆∞·ª£c",
                value="\n".join(lines),
                inline=False
            )

        remaining_r = int(user["rungs"].get(r, 0))
        if remaining_r > 0:
            emb.set_footer(
                text=(
                    f"C√≤n {remaining_r} r∆∞∆°ng {r} ‚Äî d√πng "
                    f"omo {r.lower()} all ƒë·ªÉ m·ªü ti·∫øp"
                )
            )

        save_data(data)
        await ctx.send(embed=emb)
        return

    # omo (kh√¥ng tham s·ªë): m·ªü 1 r∆∞∆°ng t·ªët nh·∫•t
    r_found = _pick_highest_available_rarity(user)
    if not r_found:
        await ctx.reply(
            "‚ùó B·∫°n kh√¥ng c√≥ r∆∞∆°ng ƒë·ªÉ m·ªü.",
            mention_author=False
        )
        return

    gp, item = _open_one_chest(user, r_found)
    save_data(data)

    highest_for_title = item["rarity"] if item else r_found
    title_emoji = RARITY_CHEST_OPENED_EMOJI.get(highest_for_title, "üéÅ")
    title = f"{title_emoji} **{ctx.author.display_name}** ƒë√£ m·ªü 1 r∆∞∆°ng"

    emb = make_embed(
        title=title,
        color=RARITY_COLOR.get(highest_for_title, 0x95A5A6),
        footer=ctx.author.display_name
    )

    rewards_block = (
        f"{NP_EMOJI}\u2003Ng√¢n Phi·∫øu: **{format_num(gp)}**\n"
        f"{EMOJI_TRANG_BI_COUNT}\u2003Trang b·ªã: **{1 if item else 0}**"
    )
    emb.add_field(
        name="Ph·∫ßn th∆∞·ªüng nh·∫≠n ƒë∆∞·ª£c",
        value=rewards_block,
        inline=False
    )

    if item:
        emb.add_field(
            name="V·∫≠t ph·∫©m nh·∫≠n ƒë∆∞·ª£c",
            value=_fmt_item_line(item),
            inline=False
        )

    await ctx.send(embed=emb)

@bot.command(name="ban", aliases=["oban"])
@commands.cooldown(1, 5, commands.BucketType.user)
async def cmd_oban(ctx, *args):
    user_id=str(ctx.author.id)
    data=ensure_user(user_id)
    user=data["users"][user_id]
    args=list(args)

    def settle(lst):
        total=sum(it["value"] for it in lst)
        user["ngan_phi"]+=total
        user["stats"]["sold_count"]+=len(lst)
        user["stats"]["sold_value_total"]+=total
        return total

    if not args:
        await ctx.reply(
            "C√∫ ph√°p: `oban all` ho·∫∑c `oban <D|C|B|A|S> all`",
            mention_author=False
        )
        return

    if args[0].lower()=="all":
        sell=[it for it in user["items"] if not it["equipped"]]
        if not sell:
            await ctx.reply(
                "Kh√¥ng c√≥ trang b·ªã r·∫£nh ƒë·ªÉ b√°n.",
                mention_author=False
            )
            return
        total=settle(sell)
        user["items"]=[it for it in user["items"] if it["equipped"]]
        save_data(data)
        await ctx.send(embed=make_embed(
            "üßæ B√°n v·∫≠t ph·∫©m",
            f"ƒê√£ b√°n **{len(sell)}** m√≥n ‚Äî Nh·∫≠n **{NP_EMOJI} {format_num(total)}**",
            color=0xE67E22,
            footer=ctx.author.display_name
        ))
        return

    if len(args)>=2 and args[1].lower()=="all":
        rar=args[0].upper()
        if rar not in ["D","C","B","A","S"]:
            await ctx.reply(
                "Ph·∫©m ch·∫•t kh√¥ng h·ª£p l·ªá (D/C/B/A/S).",
                mention_author=False
            )
            return
        sell=[it for it in user["items"] if (it["rarity"]==rar and not it["equipped"])]
        if not sell:
            await ctx.reply(
                f"Kh√¥ng c√≥ v·∫≠t ph·∫©m ph·∫©m ch·∫•t {rar} ƒë·ªÉ b√°n.",
                mention_author=False
            )
            return
        total=settle(sell)
        user["items"]=[
            it for it in user["items"]
            if not (it["rarity"]==rar and not it["equipped"])
        ]
        save_data(data)
        await ctx.send(embed=make_embed(
            "üßæ B√°n v·∫≠t ph·∫©m",
            f"ƒê√£ b√°n **{len(sell)}** m√≥n {rar} ‚Äî Nh·∫≠n **{NP_EMOJI} {format_num(total)}**",
            color=RARITY_COLOR.get(rar,0x95A5A6),
            footer=ctx.author.display_name
        ))
        return

    await ctx.reply(
        "C√∫ ph√°p kh√¥ng h·ª£p l·ªá. V√≠ d·ª•: `oban all` ho·∫∑c `oban D all`.",
        mention_author=False
    )

# ----- ƒê·ªï th·∫°ch (odt/dt) + Jackpot (module-style) -----
ODT_MAX_BET        = 250_000
POOL_ON_LOSS_RATE  = 1.0

JACKPOT_PCT         = 0.10
JACKPOT_GATE        = 0.05
JACKPOT_BASE        = 0.02
JACKPOT_HOT_BOOST   = 0.01
JACKPOT_HOT_CAP     = 5.0
JACKPOT_WINDOW_SEC  = 5 * 60
JACKPOT_THRESH_MIN  = 10_000_000
JACKPOT_THRESH_MAX  = 12_000_000
JACKPOT_THRESH_STEP = 1_000_000

ODT_TEXTS_WIN = [
    "Vi√™n ƒë√° n·ªï s√°ng, kim quang l·∫•p l√°nh!",
    "B·ª•i v·ª° tung, l·ªô b·∫£o th·∫°ch th∆∞·ª£ng c·ªï!",
    "C√≥ k·∫ª tr·∫£ gi√° g·∫•p m∆∞·ªùi mu·ªën thu mua ngay!",
    "M·ªôt tia s√°ng v·ª•t l√™n, linh kh√≠ cu·ªìn cu·ªôn!",
    "Long ng√¢m m∆° h·ªì, b·∫£o v·∫≠t hi·ªán th√¢n!",
    "Kh·∫£m tr·∫≠n kh·ªüi ƒë·ªông, linh th·∫°ch h√≥a kim!",
]

ODT_TEXTS_LOSE = [
    "M·ªü ra... b·ª•i l√† b·ª•i.",
    "H√≥a tro t√†n tr∆∞·ªõc khi k·ªãp vui.",
    "Vi√™n ƒë√° v·ª° v·ª•n, l√≤ng b·∫°n c≈©ng v·∫≠y.",
    "ƒê√° bay m·∫•t. Kh√¥ng k·ªãp nh√¨n.",
    "B·∫°n ch∆∞a ƒë·∫≠p, n√≥ ƒë√£ n·ªï!",
    "M·ªçi ng∆∞·ªùi ƒëang ch·ªù... r·ªìi th·∫•t v·ªçng.",
    "Qu·∫° ƒëen c·∫Øp ƒë√°, bay m·∫•t ti√™u.",
    "B·∫°n run tay, ƒë√° r∆°i v·ª° lu√¥n.",
    "C√≥ c√¥ n∆∞∆°ng xinh ƒë·∫πp xin vi√™n ƒë√°. B·∫°n cho lu√¥n.",
    "Kh√≥i tr·∫Øng b·ªëc l√™n... ƒë√° gi·∫£ r·ªìi.",
]

def _odt_init_state(user: dict):
    mg = user.setdefault("minigames", {})
    odt = mg.setdefault("odt", {"win_streak": 0, "loss_streak": 0})
    return odt

def _odt_pick_outcome(odt_state: dict) -> int:
    w = int(odt_state.get("win_streak", 0))
    l = int(odt_state.get("loss_streak", 0))
    base_p5, base_win = 0.005, 0.49
    delta = max(-0.04, min(0.04, (l - w) * 0.02))
    win_p = max(0.05, min(0.95, base_win + delta))
    p5 = min(base_p5, win_p)
    p2 = max(0.0, win_p - p5)
    r = random.random()
    if r < p5:
        return 5
    if r < p5 + p2:
        return 2
    return 0

def _jp(data: dict) -> dict:
    jp = data.setdefault("jackpot", {})
    jp.setdefault("pool", 0)
    jp.setdefault("hidden_threshold", 0)
    jp.setdefault("window_start", 0.0)
    jp.setdefault("hot_log", [])
    return jp

def _jp_next_threshold() -> int:
    return random.randint(JACKPOT_THRESH_MIN, JACKPOT_THRESH_MAX)

def _jp_is_window_open(jp: dict, now: float) -> bool:
    ws = float(jp.get("window_start", 0))
    return ws > 0 and (now - ws) <= JACKPOT_WINDOW_SEC

def _jp_open_window_if_needed(jp: dict, now: float):
    thr = int(jp.get("hidden_threshold", 0))
    if thr <= 0:
        thr = _jp_next_threshold()
        jp["hidden_threshold"] = thr
    if jp["pool"] >= thr and not _jp_is_window_open(jp, now):
        jp["window_start"] = now

def _jp_shift_threshold_if_expired(jp: dict, now: float):
    if jp.get("window_start", 0) and not _jp_is_window_open(jp, now):
        jp["hidden_threshold"] = int(jp.get("hidden_threshold", 0)) + JACKPOT_THRESH_STEP
        jp["window_start"] = 0

def _jp_record_hot(jp: dict, now: float):
    jp["hot_log"] = [t for t in jp.get("hot_log", []) if now - t <= 180.0]
    jp["hot_log"].append(now)

def _jp_hot_factor(jp: dict) -> float:
    recent = [t for t in jp.get("hot_log", []) if time.time() - t <= 180.0]
    return min(JACKPOT_HOT_CAP, len(recent) / 10.0)

def _try_jackpot(data: dict, member: discord.Member) -> int:
    now = time.time()
    jp = _jp(data)
    _jp_open_window_if_needed(jp, now)
    _jp_shift_threshold_if_expired(jp, now)
    _jp_record_hot(jp, now)

    pool = int(jp.get("pool", 0))
    thr  = int(jp.get("hidden_threshold", 0))

    if pool <= 0 or thr <= 0 or pool < thr or not _jp_is_window_open(jp, now):
        return 0

    if random.random() >= JACKPOT_GATE:
        return 0

    hot = _jp_hot_factor(jp)
    trigger = JACKPOT_BASE + min(JACKPOT_HOT_CAP * JACKPOT_HOT_BOOST, hot * JACKPOT_HOT_BOOST)

    if random.random() >= trigger:
        return 0

    gain = max(1, int(pool * JACKPOT_PCT))
    jp["pool"] = 0
    jp["hidden_threshold"] = _jp_next_threshold()
    jp["window_start"] = 0

    return gain



#==============ODT======================

@bot.command(name="odt", aliases=["dt"])
@commands.cooldown(1, 5, commands.BucketType.user)
async def cmd_odt(ctx, amount: str = None):
    user_id = str(ctx.author.id)
    data = ensure_user(user_id)
    user = data["users"][user_id]
    odt_state = _odt_init_state(user)

    # c·∫≠p nh·∫≠t log ho·∫°t ƒë·ªông
    touch_user_activity(ctx, user)

    if amount is None:
        await ctx.reply(
            "üí¨ D√πng: `odt <s·ªë ti·ªÅn>` ho·∫∑c `odt all`. V√≠ d·ª•: `odt 1,000`.",
            mention_author=False
        )
        return

    a = str(amount).strip().lower()
    if a == "all":
        amount_val = min(int(user.get("ngan_phi", 0)), ODT_MAX_BET)
        if amount_val <= 0:
            await ctx.reply(
                "‚ùó S·ªë d∆∞ b·∫±ng 0 ‚Äî kh√¥ng th·ªÉ `odt all`.",
                mention_author=False
            )
            return
    else:
        try:
            amount_val = int(a.replace(",", ""))
            if amount_val <= 0:
                raise ValueError()
        except Exception:
            await ctx.reply(
                "‚ö†Ô∏è S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá. V√≠ d·ª•: `odt 500`, `odt 1,000` ho·∫∑c `odt all`.",
                mention_author=False
            )
            return
        if amount_val > ODT_MAX_BET:
            await ctx.reply(
                f"‚ö†Ô∏è M·ªói v√°n t·ªëi ƒëa {format_num(ODT_MAX_BET)} Ng√¢n Phi·∫øu.",
                mention_author=False
            )
            return

    bal = int(user.get("ngan_phi", 0))
    if bal < amount_val:
        await ctx.reply(
            f"‚ùó B·∫°n kh√¥ng ƒë·ªß Ng√¢n Phi·∫øu. (Hi·ªán c√≥: {format_num(bal)})",
            mention_author=False
        )
        return

    # log: ng∆∞·ªùi n√†y v·ª´a ch∆°i th√™m 1 l·∫ßn
    user["stats"]["odt_count"] = int(user["stats"].get("odt_count", 0)) + 1
    # log: ƒë√£ chi bao nhi√™u NP v√†o odt
    user["stats"]["odt_np_spent_total"] = int(user["stats"].get("odt_np_spent_total", 0)) + amount_val

    # tr·ª´ ti·ªÅn tr∆∞·ªõc khi bi·∫øt k·∫øt qu·∫£
    user["ngan_phi"] = bal - amount_val
    save_data(data)

    outcome = _odt_pick_outcome(odt_state)
    try:
        map_name = random.choice(MAP_POOL)
    except Exception:
        map_name = random.choice([
            "Bi·ªán Kinh","ƒê√†o Kh√™ Th√¥n","Tam Thanh S∆°n",
            "H√†ng Ch√¢u","T·ª´ Ch√¢u","Nh·∫°n M√¥n Quan"
        ])

    title = f"ƒê·ªï Th·∫°ch ‚Äî {map_name}"
    color = 0x2ECC71 if outcome else 0xE74C3C
    jackpot_announce = ""

    if outcome == 0:
        # THUA
        odt_state["loss_streak"] += 1
        odt_state["win_streak"] = 0

        jp = _jp(data)
        jp["pool"] = int(jp.get("pool", 0)) + int(amount_val * POOL_ON_LOSS_RATE)

        text = random.choice(ODT_TEXTS_LOSE)
        desc = (
            f"**{ctx.author.display_name}** b·ªè ra **{format_num(amount_val)}** "
            f"**Ng√¢n Phi·∫øu**\n"
            f"ƒê·ªÉ mua m·ªôt vi√™n ƒë√° {EMOJI_DOTHACHT} ph√°t s√°ng t·∫°i th·∫°ch ph∆∞·ªùng {map_name}.\n\n"
            f"üí¨ {text}\n"
            f"{EMOJI_DOTHACHTHUA} Tr·∫Øng tay thu v·ªÅ **0 Ng√¢n Phi·∫øu**."
        )

        gain = _try_jackpot(data, ctx.author)
        if gain > 0:
            user["ngan_phi"] += gain

            # log ti·ªÅn nh·∫≠n t·ª´ jackpot v√†o t·ªïng earned
            user["stats"]["odt_np_earned_total"] = int(user["stats"].get("odt_np_earned_total", 0)) + gain

            jp = _jp(data)
            jp["last_win"] = {
                "user_id": ctx.author.id,
                "name": ctx.author.display_name,
                "amount": int(gain),
                "ts": time.time(),
            }
            jackpot_announce = (
                f"\n\nüéâ **Qu·ªπ Th·∫°ch Ph∆∞·ªùng N·ªî H≈®!** "
                f"{ctx.author.mention} nh·∫≠n **{format_num(gain)}** Ng√¢n Phi·∫øu."
            )
            try:
                await ctx.author.send(
                    f"{NP_EMOJI} Ch√∫c m·ª´ng! B·∫°n v·ª´a tr√∫ng "
                    f"**{format_num(gain)}** NP t·ª´ Qu·ªπ Th·∫°ch Ph∆∞·ªùng."
                )
            except Exception:
                pass

        save_data(data)

    else:
        # TH·∫ÆNG
        odt_state["win_streak"] += 1
        odt_state["loss_streak"] = 0

        reward = amount_val * outcome
        user["ngan_phi"] += reward

        # log ti·ªÅn ki·∫øm ƒë∆∞·ª£c t·ª´ odt
        user["stats"]["odt_np_earned_total"] = int(user["stats"].get("odt_np_earned_total", 0)) + reward

        text = random.choice(ODT_TEXTS_WIN)
        if outcome == 5:
            desc = (
                f"**{ctx.author.display_name}** b·ªè ra **{format_num(amount_val)}** "
                f"**Ng√¢n Phi·∫øu**\n"
                f"ƒê·ªÉ mua m·ªôt vi√™n ƒë√° {EMOJI_DOTHACHT} ph√°t s√°ng t·∫°i th·∫°ch ph∆∞·ªùng {map_name}.\n\n"
                f"üí¨ {text}\n"
                f"{EMOJI_DOTHACH} Th·∫≠t b·∫•t ng·ªù, ch·ªß th·∫°ch ph∆∞·ªùng t·ªï ch·ª©c ƒë·∫•u gi√° v·∫≠t ph·∫©m b·∫°n m·ªü!\n"
                f"‚Äî Thu v·ªÅ x5 gi√° tr·ªã nh·∫≠n **{format_num(reward)} Ng√¢n Phi·∫øu!**"
            )
        else:
            desc = (
                f"**{ctx.author.display_name}** b·ªè ra **{format_num(amount_val)}** "
                f"**Ng√¢n Phi·∫øu**\n"
                f"ƒê·ªÉ mua m·ªôt vi√™n ƒë√° {EMOJI_DOTHACHT} ph√°t s√°ng t·∫°i th·∫°ch ph∆∞·ªùng {map_name}.\n\n"
                f"üí¨ {text}\n"
                f"{EMOJI_DOTHACH} B·∫•t ng·ªù l√£i l·ªõn ‚Äî thu v·ªÅ **{format_num(reward)} Ng√¢n Phi·∫øu**!"
            )

        _jp_open_window_if_needed(_jp(data), time.time())
        save_data(data)

    # footer hi·ªÉn th·ªã qu·ªπ jackpot + ng∆∞·ªùi tr√∫ng g·∫ßn nh·∫•t
    jp_now = _jp(data)
    pool_now = int(jp_now.get("pool", 0))
    footer_lines = [
        f"S·ªë d∆∞ hi·ªán t·∫°i: {format_num(user['ngan_phi'])} Ng√¢n Phi·∫øu",
        f"Qu·ªπ Th·∫°ch Ph∆∞·ªùng: {format_num(pool_now)} Ng√¢n Phi·∫øu",
    ]
    last_win = jp_now.get("last_win")
    if isinstance(last_win, dict) and last_win.get("name") and last_win.get("amount"):
        footer_lines.append(
            f"G·∫ßn nh·∫•t {last_win['name']} ƒë√£ nh·∫≠n {format_num(int(last_win['amount']))} Ng√¢n Phi·∫øu"
        )

    emb = make_embed(
        title=title,
        description=desc + jackpot_announce,
        color=color,
        footer="\n".join(footer_lines)
    )
    await ctx.send(
        content=(ctx.author.mention if jackpot_announce else None),
        embed=emb
    )



# ===============ODT======================







# ==========================================================
# üèÜ B·∫¢NG X·∫æP H·∫†NG (obxh / bxh)
# B·∫£n h·ªó tr·ª£:
# - Layout ng·∫Øn g·ªçn "ü•á TOP 1 ‚Äî ..."
# - View 7 n√∫t v·ªõi m√†u theo y√™u c·∫ßu
# - N√∫t hi·ªán t·∫°i s·∫Ω disabled
# - Timeout 300s
# ==========================================================

# ---------- UTIL / DATA PREP ----------

def _bxh_safe_user_for_rank(u: dict) -> dict:
    clone = dict(u)

    stats = dict(clone.get("stats", {}))
    clone["stats"] = stats
    stats.setdefault("ol_count", 0)     # s·ªë l·∫ßn th√°m hi·ªÉm
    stats.setdefault("odt_count", 0)    # s·ªë l·∫ßn ƒë·ªï th·∫°ch
    stats.setdefault("opened", 0)       # t·ªïng r∆∞∆°ng ƒë√£ m·ªü (lifetime)

    r_raw = clone.get("rungs", {})
    clone["rungs"] = {
        "S": int(r_raw.get("S", 0)),
        "A": int(r_raw.get("A", 0)),
        "B": int(r_raw.get("B", 0)),
        "C": int(r_raw.get("C", 0)),
        "D": int(r_raw.get("D", 0)),
    }

    clone["ngan_phi"] = int(clone.get("ngan_phi", 0))

    return clone


def _bxh_collect_users(data: dict) -> dict[str, dict]:
    prepared = {}
    for uid, raw in data.get("users", {}).items():
        if isinstance(raw, dict):
            prepared[uid] = _bxh_safe_user_for_rank(raw)
    return prepared


def _bxh_total_ruong_alltime(u: dict) -> tuple[int, dict]:
    """
    T·ªïng R∆∞∆°ng B√°u su·ªët ƒë·ªùi:
    - r∆∞∆°ng ƒëang gi·ªØ (S/A/B/C/D)
    - + r∆∞∆°ng ƒë√£ m·ªü (stats.opened)
    """
    stats = u["stats"]
    opened_total = int(stats.get("opened", 0))

    r = u["rungs"]
    s = r["S"]; a = r["A"]; b = r["B"]; c = r["C"]; d = r["D"]

    holding_now = s + a + b + c + d
    total_alltime = holding_now + opened_total

    breakdown_now = {"S": s, "A": a, "B": b, "C": c, "D": d}
    return total_alltime, breakdown_now


async def _bxh_display_name(uid: str) -> str:
    try:
        obj = bot.get_user(int(uid))
        if not obj:
            obj = await bot.fetch_user(int(uid))
        if obj:
            return obj.display_name or obj.name
    except Exception:
        pass
    return f"ID:{uid}"


def _bxh_rank(prepared: dict[str, dict], category: str):
    """
    Tr·∫£ v·ªÅ (top10, full_sorted) theo category:
      "ol"    => stats.ol_count
      "odt"   => stats.odt_count
      "tien"  => ngan_phi
      "ruong" => t·ªïng r∆∞∆°ng b√°u (lifetime)
    M·ªói ph·∫ßn t·ª≠ trong list = (uid, value)
    """
    arr = []
    for uid, u in prepared.items():
        if category == "ol":
            val = int(u["stats"].get("ol_count", 0))
        elif category == "odt":
            val = int(u["stats"].get("odt_count", 0))
        elif category == "tien":
            val = int(u["ngan_phi"])
        elif category == "ruong":
            val, _ = _bxh_total_ruong_alltime(u)
        else:
            continue
        arr.append((uid, val))

    arr.sort(key=lambda x: x[1], reverse=True)
    return arr[:10], arr


# ---------- OVERVIEW EMBED (T·ªîNG / TU·∫¶N / NG√ÄY) ----------

async def _bxh_build_overview_embed(period: str, requestor_name: str):
    """
    period in {"all","week","day"}
    requestor_name: t√™n ng∆∞·ªùi xem (ctx.author.display_name / inter.user.display_name)
    UI format y√™u c·∫ßu:
    üó∫Ô∏è Th√°m Hi·ªÉm
    ü•á TOP 1 ‚Äî Lucky Man ‚Äî 20 l·∫ßn
    ...
    """
    data = load_data()
    prepared = _bxh_collect_users(data)

    # L·∫•y top1 t·ª´ng m·∫£ng (lifetime)
    top_ol,   _all_ol   = _bxh_rank(prepared, "ol")
    top_odt,  _all_odt  = _bxh_rank(prepared, "odt")
    top_tien, _all_tien = _bxh_rank(prepared, "tien")
    top_r,    _all_r    = _bxh_rank(prepared, "ruong")

    async def block_thamhiem():
        if not top_ol:
            return "üó∫Ô∏è Th√°m Hi·ªÉm\nKh√¥ng c√≥ d·ªØ li·ªáu."
        uid, val = top_ol[0]
        dn = await _bxh_display_name(uid)
        return (
            "üó∫Ô∏è Th√°m Hi·ªÉm\n"
            f"ü•á TOP 1 ‚Äî {dn} ‚Äî {val} l·∫ßn"
        )

    async def block_dothach():
        if not top_odt:
            return f"{EMOJI_DOTHACHT} ƒê·ªï Th·∫°ch\nKh√¥ng c√≥ d·ªØ li·ªáu."
        uid, val = top_odt[0]
        dn = await _bxh_display_name(uid)
        return (
            f"{EMOJI_DOTHACHT} ƒê·ªï Th·∫°ch\n"
            f"ü•á TOP 1 ‚Äî {dn} ‚Äî {val} l·∫ßn"
        )

    async def block_tien():
        if not top_tien:
            return f"{NP_EMOJI} Ng√¢n Phi·∫øu\nKh√¥ng c√≥ d·ªØ li·ªáu."
        uid, val = top_tien[0]
        dn = await _bxh_display_name(uid)
        return (
            f"{NP_EMOJI} Ng√¢n Phi·∫øu\n"
            f"ü•á TOP 1 ‚Äî {dn} ‚Äî {format_num(val)} Ng√¢n Phi·∫øu"
        )

    async def block_ruong():
        if not top_r:
            return "<:ruongthuong:1433525898107158660> R∆∞∆°ng B√°u\nKh√¥ng c√≥ d·ªØ li·ªáu."
        uid, _val = top_r[0]
        dn = await _bxh_display_name(uid)

        total_alltime, breakdown = _bxh_total_ruong_alltime(prepared[uid])

        # Emoji ph·∫©m r∆∞∆°ng
        # RARITY_CHEST_EMOJI["S"] ... n·∫øu file b·∫°n ƒë√£ map m·∫•y emoji ph·∫©m S/A/B/C/D,
        # c√≤n n·∫øu b·∫°n mu·ªën m√†u tr√≤n ki·ªÉu üü£ üü° üü† üîµ ‚ö™ th√¨ thay ·ªü ƒë√¢y.
        emo_S = RARITY_CHEST_EMOJI.get("S", "üü£")
        emo_A = RARITY_CHEST_EMOJI.get("A", "üü°")
        emo_B = RARITY_CHEST_EMOJI.get("B", "üü†")
        emo_C = RARITY_CHEST_EMOJI.get("C", "üîµ")
        emo_D = RARITY_CHEST_EMOJI.get("D", "‚ö™")

        s = breakdown["S"]; a = breakdown["A"]; b = breakdown["B"]; c = breakdown["C"]; d = breakdown["D"]

        return (
            "<:ruongthuong:1433525898107158660> R∆∞∆°ng B√°u\n"
            f"ü•á TOP 1 ‚Äî {dn} ‚Äî {total_alltime} R∆∞∆°ng B√°u\n"
            f"{emo_S} {s}  {emo_A} {a}  {emo_B} {b}  {emo_C} {c}  {emo_D} {d}"
        )

    # period ti√™u ƒë·ªÅ
    if period == "all":
        title = "üèÜ T·ªîNG B·∫¢NG X·∫æP H·∫†NG"
        block_note = (
            "Ch·ªçn n√∫t b√™n d∆∞·ªõi ƒë·ªÉ xem TOP 10\n"
            "chi ti·∫øt ho·∫∑c xem BXH Tu·∫ßn/ Ng√†yüëá\n"
        )
    elif period == "week":
        title = "üèµÔ∏è B·∫¢NG X·∫æP H·∫†NG TU·∫¶N"
        # Hi·ªán t·∫°i ch∆∞a c√≥ log tu·∫ßn -> placeholder
        block_note = (
            "‚ö†Ô∏è H·ªá th·ªëng ƒëang thu th·∫≠p d·ªØ li·ªáu tu·∫ßn.\n"
            "   S·ªë li·ªáu s·∫Ω xu·∫•t hi·ªán sau khi log tu·∫ßn ƒë∆∞·ª£c k√≠ch ho·∫°t."
        )
    else:
        title = "üåÑ B·∫¢NG X·∫æP H·∫†NG NG√ÄY"
        block_note = (
            "‚ö†Ô∏è H·ªá th·ªëng ƒëang thu th·∫≠p d·ªØ li·ªáu ng√†y.\n"
            "   S·ªë li·ªáu s·∫Ω xu·∫•t hi·ªán sau khi log ng√†y ƒë∆∞·ª£c k√≠ch ho·∫°t."
        )

    # n·∫øu period != "all", ta v·∫´n mu·ªën show layout gi·ªëng "all" hay ch·ªâ hi·ªán c·∫£nh b√°o?
    # Y√™u c·∫ßu hi·ªán t·∫°i: tu·∫ßn/ng√†y ch·ªâ show n·ªôi dung c·∫£nh b√°o, kh√¥ng c·∫ßn th·ªëng k√™ th·∫≠t.
    if period == "all":
        desc = "\n\n".join([
            await block_thamhiem(),
            await block_dothach(),
            await block_tien(),
            await block_ruong(),
            block_note
        ])
    else:
        desc = block_note

    emb = make_embed(
        title=title,
        description=desc,
        color=0xF1C40F,
        footer=f"Y√™u c·∫ßu b·ªüi {requestor_name}"
    )
    return emb


async def _bxh_render_overview_ctx(ctx: commands.Context, period: str):
    return await _bxh_build_overview_embed(period, ctx.author.display_name)

async def _bxh_render_overview_inter(inter: discord.Interaction, period: str, owner_name: str):
    return await _bxh_build_overview_embed(period, owner_name)


def _bxh_footer_with_rank(category: str, author_id: int, author_name: str, full_sorted: list):
    """
    Footer hi·ªÉn th·ªã v·ªã tr√≠ v√† ch·ªâ s·ªë c·ªßa ch√≠nh ng∆∞·ªùi b·∫•m.
    """
    pos = None
    you_line = None
    aid = str(author_id)

    for rank_idx, item in enumerate(full_sorted, start=1):
        uid_here = str(item[0])
        if uid_here != aid:
            continue
        val = item[1]
        if category == "ol":
            you_line = f"B·∫°n: {val} l·∫ßn"
        elif category == "odt":
            you_line = f"B·∫°n: {val} l·∫ßn"
        elif category == "tien":
            you_line = f"B·∫°n: {format_num(val)} Ng√¢n Phi·∫øu"
        elif category == "ruong":
            you_line = f"B·∫°n: {val} R∆∞∆°ng B√°u (t√≠nh c·∫£ ƒë√£ m·ªü)"
        pos = rank_idx
        break

    if pos is None:
        return f"Y√™u c·∫ßu b·ªüi {author_name}"

    footer_txt = f"V·ªã tr√≠ c·ªßa b·∫°n: #{pos}"
    if you_line:
        footer_txt += f" ‚Ä¢ {you_line}"
    return footer_txt


async def _bxh_render_detail(category: str, author_id: int, author_name: str):
    """
    category in ["ol","odt","tien","ruong"]
    Hi·ªÉn th·ªã TOP 10 ƒë·∫ßy ƒë·ªß cho 1 h·∫°ng m·ª•c.
    """
    data = load_data()
    prepared = _bxh_collect_users(data)

    topN, full_sorted = _bxh_rank(prepared, category)
    lines = []

    if category == "ol":
        title = "üó∫Ô∏è TOP 10 ‚Äî TH√ÅM HI·ªÇM"
        for i, (uid, val) in enumerate(topN, start=1):
            dn = await _bxh_display_name(uid)
            lines.append(f"#{i} {dn} ‚Äî {val} l·∫ßn")

    elif category == "odt":
        title = f"{EMOJI_DOTHACHT} TOP 10 ‚Äî ƒê·ªî TH·∫†CH"
        for i, (uid, val) in enumerate(topN, start=1):
            dn = await _bxh_display_name(uid)
            lines.append(f"#{i} {dn} ‚Äî {val} l·∫ßn")

    elif category == "tien":
        title = f"{NP_EMOJI} TOP 10 ‚Äî NG√ÇN PHI·∫æU"
        for i, (uid, val) in enumerate(topN, start=1):
            dn = await _bxh_display_name(uid)
            lines.append(f"#{i} {dn} ‚Äî {format_num(val)} Ng√¢n Phi·∫øu")

    elif category == "ruong":
        title = "<:ruongthuong:1433525898107158660> TOP 10 ‚Äî R∆Ø∆†NG B√ÅU"
        for i, (uid, _v) in enumerate(topN, start=1):
            dn = await _bxh_display_name(uid)
            total_alltime, brk = _bxh_total_ruong_alltime(prepared[uid])

            # emoji ph·∫©m
            emo_S = RARITY_CHEST_EMOJI.get("S", "üü£")
            emo_A = RARITY_CHEST_EMOJI.get("A", "üü°")
            emo_B = RARITY_CHEST_EMOJI.get("B", "üü†")
            emo_C = RARITY_CHEST_EMOJI.get("C", "üîµ")
            emo_D = RARITY_CHEST_EMOJI.get("D", "‚ö™")

            s = brk["S"]; a = brk["A"]; b = brk["B"]; c = brk["C"]; d = brk["D"]

            lines.append(
                f"#{i} {dn} ‚Äî {total_alltime} R∆∞∆°ng B√°u\n"
                f"{emo_S} {s}  {emo_A} {a}  {emo_B} {b}  {emo_C} {c}  {emo_D} {d}"
            )

    else:
        title = "TOP 10"
        lines = ["Ch∆∞a c√≥ d·ªØ li·ªáu."]

    if not lines:
        lines = ["Ch∆∞a c√≥ d·ªØ li·ªáu."]

    footer_txt = _bxh_footer_with_rank(category, author_id, author_name, full_sorted)

    emb = make_embed(
        title=title,
        description="\n".join(lines),
        color=0xF1C40F,
        footer=footer_txt
    )
    return emb


# ---------- VIEW (C√ì DISABLED N√öT HI·ªÜN T·∫†I) ----------

class BXHView(discord.ui.View):
    """
    View 7 n√∫t:
      üèÜ T·ªïng (danger)
      üèµÔ∏è Tu·∫ßn (primary)
      üåÑ Ng√†y (success)
      üó∫Ô∏è Th√°m Hi·ªÉm (success)
      üíé ƒê·ªï Th·∫°ch (success)
      üí∞ Ng√¢n Phi·∫øu (success)
      üì¶ R∆∞∆°ng B√°u (success)

    current_tab:
      "all", "week", "day", "ol", "odt", "tien", "ruong"
    -> n√∫t t∆∞∆°ng ·ª©ng s·∫Ω disabled=True

    Timeout = 300s (5 ph√∫t)
    """
    def __init__(self, owner_id: int, owner_name: str, current_tab: str, timeout: float = 300):
        super().__init__(timeout=timeout)
        self.owner_id = owner_id
        self.owner_name = owner_name
        self.current_tab = current_tab

        # Sau khi View init, ta s·∫Ω set disabled cho n√∫t ƒë√∫ng tab
        self._apply_disabled_state()

    async def _is_owner(self, inter: discord.Interaction) -> bool:
        if inter.user.id != self.owner_id:
            try:
                await inter.response.send_message(
                    "‚ö†Ô∏è ƒê√¢y kh√¥ng ph·∫£i b·∫£ng x·∫øp h·∫°ng c·ªßa b·∫°n.",
                    ephemeral=True
                )
            except Exception:
                pass
            return False
        return True

    def _apply_disabled_state(self):
        # Map tab -> n√∫t
        tab_map = {
            "all":  "btn_total",
            "week": "btn_week",
            "day":  "btn_day",
            "ol":   "btn_thamhiem",
            "odt":  "btn_dothach",
            "tien": "btn_tien",
            "ruong":"btn_ruong",
        }
        target = tab_map.get(self.current_tab)
        if target:
            for child in self.children:
                if hasattr(child, "custom_id"):
                    # ch√∫ng ta kh√¥ng set custom_id th·ªß c√¥ng ·ªü ƒë√¢y,
                    # n√™n fallback theo name attribute
                    pass
            # v√¨ discord.ui.button decorator t·∫°o attribute tr√πng t√™n h√†m,
            # ta c√≥ th·ªÉ d√πng getattr ƒë·ªÉ disable
            try:
                getattr(self, target).disabled = True
            except Exception:
                pass

    # ====== H√ÄNG 1: T·ªïng / Tu·∫ßn / Ng√†y ======

    @discord.ui.button(
        label="T·ªïng",
        emoji="üèÜ",
        style=discord.ButtonStyle.danger
    )
    async def btn_total(self, inter: discord.Interaction, button: discord.ui.Button):
        if not await self._is_owner(inter):
            return
        emb = await _bxh_render_overview_inter(inter, "all", self.owner_name)
        new_view = BXHView(self.owner_id, self.owner_name, current_tab="all")
        await inter.response.edit_message(embed=emb, view=new_view)

    @discord.ui.button(
        label="Tu·∫ßn",
        emoji="üèµÔ∏è",
        style=discord.ButtonStyle.primary
    )
    async def btn_week(self, inter: discord.Interaction, button: discord.ui.Button):
        if not await self._is_owner(inter):
            return
        emb = await _bxh_render_overview_inter(inter, "week", self.owner_name)
        new_view = BXHView(self.owner_id, self.owner_name, current_tab="week")
        await inter.response.edit_message(embed=emb, view=new_view)

    @discord.ui.button(
        label="Ng√†y",
        emoji="üåÑ",
        style=discord.ButtonStyle.success
    )
    async def btn_day(self, inter: discord.Interaction, button: discord.ui.Button):
        if not await self._is_owner(inter):
            return
        emb = await _bxh_render_overview_inter(inter, "day", self.owner_name)
        new_view = BXHView(self.owner_id, self.owner_name, current_tab="day")
        await inter.response.edit_message(embed=emb, view=new_view)

    # ====== H√ÄNG 2: Top 10 chi ti·∫øt ======

    @discord.ui.button(
        label="Th√°m Hi·ªÉm",
        emoji="üó∫Ô∏è",
        style=discord.ButtonStyle.success
    )
    async def btn_thamhiem(self, inter: discord.Interaction, button: discord.ui.Button):
        if not await self._is_owner(inter):
            return
        emb = await _bxh_render_detail("ol", self.owner_id, self.owner_name)
        new_view = BXHView(self.owner_id, self.owner_name, current_tab="ol")
        await inter.response.edit_message(embed=emb, view=new_view)

    @discord.ui.button(
        label="ƒê·ªï Th·∫°ch",
        emoji=EMOJI_DOTHACHT,
        style=discord.ButtonStyle.success
    )
    async def btn_dothach(self, inter: discord.Interaction, button: discord.ui.Button):
        if not await self._is_owner(inter):
            return
        emb = await _bxh_render_detail("odt", self.owner_id, self.owner_name)
        new_view = BXHView(self.owner_id, self.owner_name, current_tab="odt")
        await inter.response.edit_message(embed=emb, view=new_view)

    @discord.ui.button(
        label="Ng√¢n Phi·∫øu",
        emoji=NP_EMOJI,
        style=discord.ButtonStyle.success
    )
    async def btn_tien(self, inter: discord.Interaction, button: discord.ui.Button):
        if not await self._is_owner(inter):
            return
        emb = await _bxh_render_detail("tien", self.owner_id, self.owner_name)
        new_view = BXHView(self.owner_id, self.owner_name, current_tab="tien")
        await inter.response.edit_message(embed=emb, view=new_view)

    @discord.ui.button(
        label="R∆∞∆°ng B√°u",
        emoji="<:ruongthuong:1433525898107158660>",
        style=discord.ButtonStyle.success
    )
    async def btn_ruong(self, inter: discord.Interaction, button: discord.ui.Button):
        if not await self._is_owner(inter):
            return
        emb = await _bxh_render_detail("ruong", self.owner_id, self.owner_name)
        new_view = BXHView(self.owner_id, self.owner_name, current_tab="ruong")
        await inter.response.edit_message(embed=emb, view=new_view)


# ---------- COMMAND ----------

@bot.command(name="obxh", aliases=["bxh"])
@commands.cooldown(1, 5, commands.BucketType.user)
async def cmd_obxh(ctx: commands.Context):
    """
    G·ªçi BXH l·∫ßn ƒë·∫ßu:
    - Hi·ªÉn th·ªã üèÜ T·ªîNG B·∫¢NG X·∫æP H·∫†NG
    - G·ª≠i view c√≥ 7 n√∫t
    - N√∫t "T·ªïng" s·∫Ω b·ªã disable v√¨ ƒëang ·ªü tab T·ªïng
    """
    emb = await _bxh_render_overview_ctx(ctx, "all")
    view = BXHView(ctx.author.id, ctx.author.display_name, current_tab="all")
    await ctx.send(embed=emb, view=view)







@bot.command(name="pingg")
async def cmd_opingg(ctx):
    t0 = time.perf_counter()
    msg = await ctx.send("‚è±Ô∏è ƒêang ƒëo...")
    t1 = time.perf_counter()
    gateway_ms = int(bot.latency * 1000)
    send_ms = int((t1 - t0) * 1000)
    await msg.edit(
        content=f"üèì Gateway: {gateway_ms} ms ‚Ä¢ Send/edit: {send_ms} ms"
    )





# ===============================================
# üîÑ T·ª∞ ƒê·ªòNG SAO L∆ØU D·ªÆ LI·ªÜU + TH√îNG B√ÅO K√äNH (C√ì C·∫§U H√åNH)
# ===============================================
from discord.ext import tasks
import time

# üß≠ K√™nh Discord ƒë·ªÉ g·ª≠i th√¥ng b√°o
AUTO_BACKUP_CHANNEL_ID = 1433207596898193479  

# ‚è± Th·ªùi gian m·∫∑c ƒë·ªãnh (c√≥ th·ªÉ thay ƒë·ªïi l√∫c ch·∫°y b·∫±ng l·ªánh othoigiansaoluu)
AUTO_BACKUP_INTERVAL_MINUTES = 10    # sao l∆∞u m·ªói X ph√∫t
AUTO_REPORT_INTERVAL_MINUTES = 60    # b√°o l√™n k√™nh t·ªëi ƒëa 1 l·∫ßn m·ªói Y ph√∫t

# B·ªô nh·ªõ runtime
_last_report_ts = 0  # timestamp gi√¢y l·∫ßn cu·ªëi ƒë√£ b√°o
_auto_backup_started = False  # ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ start loop 1 l·∫ßn

@tasks.loop(minutes=1)
async def auto_backup_task():
    """
    V√≤ng l·∫∑p ch·∫°y m·ªói 1 ph√∫t.
    - T·ª± ƒë·∫øm ph√∫t ƒë·ªÉ bi·∫øt khi n√†o c·∫ßn backup.
    - Backup xong th√¨ quy·∫øt ƒë·ªãnh c√≥ b√°o v√†o k√™nh hay kh√¥ng.
    """
    global _last_report_ts
    global AUTO_BACKUP_INTERVAL_MINUTES
    global AUTO_REPORT_INTERVAL_MINUTES

    # setup bi·∫øn ƒë·∫øm ph√∫t t·ª´ l·∫ßn backup g·∫ßn nh·∫•t
    if not hasattr(auto_backup_task, "_minutes_since_backup"):
        auto_backup_task._minutes_since_backup = 0

    auto_backup_task._minutes_since_backup += 1

    # ch∆∞a ƒë·ªß th·ªùi gian -> th√¥i
    if auto_backup_task._minutes_since_backup < AUTO_BACKUP_INTERVAL_MINUTES:
        return

    # reset ƒë·∫øm v√¨ s·∫Øp backup
    auto_backup_task._minutes_since_backup = 0

    # Th·ª±c hi·ªán backup
    try:
        data_now = load_data()
        filename = snapshot_data_v16(data_now, tag="auto", subkey="manual")

        # D·ªçn backup c≈© (gi·ªØ l·∫°i 10 b·∫£n manual m·ªõi nh·∫•t)
        try:
            _cleanup_old_backups_limit()
        except Exception as e:
            print(f"[AUTO-BACKUP] ‚ö†Ô∏è L·ªói d·ªçn backup c≈©: {e}")

        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        msg = (
            f"‚úÖ **T·ª± ƒë·ªông sao l∆∞u d·ªØ li·ªáu th√†nh c√¥ng!**\n"
            f"üì¶ File: `{os.path.basename(filename)}`\n"
            f"üïê Th·ªùi gian backup: {current_time}\n"
            f"‚è±Ô∏è Chu k·ª≥ backup hi·ªán t·∫°i: {AUTO_BACKUP_INTERVAL_MINUTES} ph√∫t/l·∫ßn\n"
            f"üì£ Chu k·ª≥ b√°o c√°o hi·ªán t·∫°i: {AUTO_REPORT_INTERVAL_MINUTES} ph√∫t/l·∫ßn"
        )

        print(f"[AUTO-BACKUP] {msg}")

        # C√≥ n√™n b√°o v√†o k√™nh kh√¥ng?
        now_ts = time.time()
        elapsed_since_report_min = (now_ts - _last_report_ts) / 60.0

        if elapsed_since_report_min >= AUTO_REPORT_INTERVAL_MINUTES:
            try:
                channel = bot.get_channel(AUTO_BACKUP_CHANNEL_ID)
                if channel:
                    await channel.send(msg)
                else:
                    print("[AUTO-BACKUP] ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k√™nh Discord ƒë·ªÉ g·ª≠i th√¥ng b√°o.")
            except Exception as e:
                print(f"[AUTO-BACKUP] ‚ö†Ô∏è L·ªói g·ª≠i th√¥ng b√°o Discord: {e}")

            _last_report_ts = now_ts  # ƒë√°nh d·∫•u l·∫ßn b√°o g·∫ßn nh·∫•t

    except Exception as e:
        print(f"[AUTO-BACKUP] ‚ùå L·ªói khi t·∫°o backup t·ª± ƒë·ªông: {e}")


@auto_backup_task.before_loop
async def before_auto_backup():
    # ƒë·ª£i bot k·∫øt n·ªëi xong discord
    await bot.wait_until_ready()
    # kh·ªüi t·∫°o l·∫°i b·ªô ƒë·∫øm ph√∫t
    auto_backup_task._minutes_since_backup = 0
    # l·∫ßn ƒë·∫ßu start th√¨ cho ph√©p b√°o ngay
    global _last_report_ts
    _last_report_ts = 0
    print("[AUTO-BACKUP] V√≤ng l·∫∑p chu·∫©n b·ªã ch·∫°y (m·ªói 1 ph√∫t tick).")











# ================================
# üöÄ KH·ªûI T·∫†O & CH·∫†Y BOT
# ================================
async def _main():
    ensure_data()
    # (Module ƒë√£ full command, kh√¥ng c·∫ßn load_extension)
    await bot.start(TOKEN)

if __name__ == "__main__":
    TOKEN = os.environ.get("TU_TIEN_BOT_TOKEN", "")
    if not TOKEN:
        print("Vui l√≤ng ƒë·∫∑t bi·∫øn m√¥i tr∆∞·ªùng TU_TIEN_BOT_TOKEN v·ªõi token bot c·ªßa b·∫°n.")
    else:
        import asyncio
        asyncio.run(_main())
# ================================
# ‚úÖ K·∫æT TH√öC FILE
# ================================
